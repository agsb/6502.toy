  Thu Jan 27 2022  6:08                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C02 Macro Assembler    **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                        ;**************************************************************************************************
     2                        ;*    C02BIOS 4.01 - Release version for Pocket SBC  (c)2013-2022 by Kevin E. Maier 27/01/2022    *
     3                        ;*                                                                                                *
     4                        ;* BIOS Version 4.01 supports the following 3.3V hardware specification:                          *
     5                        ;*                                                                                                *
     6                        ;*  - W65C02S with clock rate up to 8.0 MHz                                                       *
     7                        ;*  - AS6C66256 32KB Static RAM                                                                   *
     8                        ;*  - AT28BV256 32KB EEPROM ROM                                                                   *
     9                        ;*  - ATF22LV10C Single Glue Logic                                                                *
    10                        ;*  - NXP SC28L92 DUART for Console Port / Aux Serial Port / Timer                                *
    11                        ;*  - TL7533 Reset Circuit (positive & negative Reset signals)                                    *
    12                        ;*  - DS1233A Reset Circuit for NMI Panic Trigger                                                 *
    13                        ;*                                                                                                *
    14                        ;* Hardware map is flexible via Glue logic                                                        *
    15                        ;*  - 5 I/O selects @ 32-bytes wide             $FE00 - $FE9F                                     *
    16                        ;*  - 1 I/O select used by SC28L92 DUART        $FE80 - $FE9F                                     *
    17                        ;*  - 4 I/O selects available on expansion bus  $FE00 - $FE7F                                     *
    18                        ;*                                                                                                *
    19                        ;* Additional Hardware support:                                                                   *
    20                        ;*  - MicroDrive IDE PATA interface                                                               *
    21                        ;*    - 16-bit upper latch for data read/write                                                    *
    22                        ;*  - DS15x1W Realtime Clock/Calendar                                                             *
    23                        ;*                                                                                                *
    24                        ;* BIOS Functions are divided into groups as follows:                                             *
    25                        ;*                                                                                                *
    26                        ;* SC28L92 DUART functions:                                                                       *
    27                        ;* - Full duplex interrupt-driven/buffered I/O for both DUART Channels                            *
    28                        ;* - Precision timer services with 10ms accuracy                                                  *
    29                        ;* - RTC based Jiffy Clock, Sec, Min, Hour, Date                                                  *
    30                        ;* - Accurate delays from 10ms to ~46 hours                                                       *
    31                        ;* - 10ms Benchmark Timing to 65535.99 seconds                                                    *
    32                        ;*                                                                                                *
    33                        ;* IDE Controller Functions supporting PATA 16-bit Data Transfers:                                *
    34                        ;* - Reset IDE (recalibrate command)                                                              *
    35                        ;* - Get IDE Status and Extended Error codes                                                      *
    36                        ;* - Get IDE Identification Block                                                                 *
    37                        ;* - Read a Block from IDE device                                                                 *
    38                        ;* - Write a Block to IDE device                                                                  *
    39                        ;* - Verify the last Block from IDE device                                                        *
    40                        ;* - Set the LBA Block ID for Read/Write/Verify                                                   *
    41                        ;* - Set the Memory Address to transfer Block data to/from                                        *
    42                        ;* - Enable the Write Cache on IDE controller                                                     *
    43                        ;* - Disable the Write Cache on IDE controller                                                    *
    44                        ;*                                                                                                *
    45                        ;* Maxim Realtime Clock functions:                                                                *
    46                        ;* - Detect RTC (signature in NVRAM) and Load software RTC variables                              *
    47                        ;* - Read and Write NVRAM block                                                                   *
    48                        ;*                                                                                                *
    49                        ;* BIOS Features:                                                                                 *
    50                        ;* - Extendable BIOS structure with soft vectors                                                  *
    51                        ;* - Soft config parameters for I/O devices                                                       *
    52                        ;* - Monitor cold/warm start soft vectored                                                        *
    53                        ;* - Panic Routine to restore Vectors and Reinitialize Console                                    *
    54                        ;* - Fully relocatable code (sans page $FF)                                                       *
    55                        ;* - JUMP Table at $FF00 - 32 functions                                                           *
    56                        ;* - Default memory allocation of 2KB (includes I/O mapping)                                      *
    57                        ;**************************************************************************************************
  Thu Jan 27 2022  6:08                                                                                                    Page 2


    58                                PL      66      ;Page Length
    59                                PW      132     ;Page Width (# of char/line)
    60                                CHIP    W65C02S ;Enable WDC 65C02 instructions
    61                                PASS1   OFF     ;Set ON when used for debug
    62                                INCLIST ON      ;Set ON for listing Include files
    63                        ;**************************************************************************************************
    64                        ;
    65                        ; C02BIOS Version 4.0x is based on C02BIOS Version 3.04.
    66                        ;
    67                        ; - Main changes are to support the NXP SC28L92 DUART.
    68                        ; - Minor changes to Page Zero to include required pointers, etc. for the second serial port.
    69                        ;
    70                        ;**************************************************************************************************
    71                        ;
    72                        ; This BIOS and Monitor version also use a common source file for constants and variables used by
    73                        ; both. This just simplifies keeping both code pieces in sync.
    74                        ;
    75                                INCLUDE         C02Constants4.asm
     1                        ;**************************************************************************************************
     2                        ;*                                                                                                *
     3                        ;*              C02 Constants used for the 4.0x releases of C02BIOS4 and C02Monitor4              *
     4                        ;*                                                                                                *
     5                        ;*                                                                                                *
     6                        ;*                                  08/10/2021 (Day/Month/Year)                                   *
     7                        ;*                                                                                                *
     8                        ;**************************************************************************************************
     9                        ; C02BIOS / C02Monitor Version is now 4.00                                                        *
    10                        ; - All Constants and Variables are now defined in a single source file (this one) for assembling *
    11                        ; - both the C02BIOS4 and the C02Monitor4. It is also used for the Template for writing code to   *
    12                        ; - be used for the C02 Pocket SBC and Adapters.                                                  *
    13                        ;                                                                                                 *
    14                        ; - Be sure to include this file at the start of any source file that needs it.                   *
    15                        ;                                                                                                 *
    16                        ;**************************************************************************************************
    17                        ;                                                                                                 *
    18                        ;       - Page Zero definitions ($00 to $9F reserved for user routines)                           * 
    19                        ;                                                                                                 *
    20                        ;**************************************************************************************************
    21                        ;
    22             000000A0   PGZERO_ST       .EQU    $A0                     ;Start of Monitor Page 0 use ($A0-$CF, 48 bytes)
    23                        ;
    24             000000A0   BUFF_PG0        .EQU    PGZERO_ST+00            ;Default Page zero location for Monitor buffers
    25                        ;
    26             000000A0   INBUFF          .EQU    BUFF_PG0+00             ;Input Buffer - 4 bytes ($A0-$A3)
    27             000000A4   DATABUFF        .EQU    BUFF_PG0+04             ;Data Buffer - 6 bytes ($A4-$A9)
    28                        ;
    29                        ;       - 16-bit variables:
    30             000000AA   HEXDATAH        .EQU    PGZERO_ST+10            ;Hexadecimal input
    31             000000AB   HEXDATAL        .EQU    PGZERO_ST+11
    32             000000AC   BINVALL         .EQU    PGZERO_ST+12            ;Binary Value for HEX2ASC
    33             000000AD   BINVALH         .EQU    PGZERO_ST+13
    34             000000AE   COMLO           .EQU    PGZERO_ST+14            ;User command address
    35             000000AF   COMHI           .EQU    PGZERO_ST+15
    36             000000B0   INDEXL          .EQU    PGZERO_ST+16            ;Index for address - multiple routines
    37             000000B1   INDEXH          .EQU    PGZERO_ST+17
    38             000000B2   TEMP1L          .EQU    PGZERO_ST+18            ;Index for word temp value used by Memdump
    39             000000B3   TEMP1H          .EQU    PGZERO_ST+19
    40             000000B4   TEMP2L          .EQU    PGZERO_ST+20            ;Index for Text entry
    41             000000B5   TEMP2H          .EQU    PGZERO_ST+21
    42             000000B6   PROMPTL         .EQU    PGZERO_ST+22            ;Prompt string address
    43             000000B7   PROMPTH         .EQU    PGZERO_ST+23
    44             000000B8   SRCL            .EQU    PGZERO_ST+24            ;Source address for memory operations
    45             000000B9   SRCH            .EQU    PGZERO_ST+25
  Thu Jan 27 2022  6:08                                                                                                    Page 3


    46             000000BA   TGTL            .EQU    PGZERO_ST+26            ;Target address for memory operations
    47             000000BB   TGTH            .EQU    PGZERO_ST+27
    48             000000BC   LENL            .EQU    PGZERO_ST+28            ;Length address for memory operations
    49             000000BD   LENH            .EQU    PGZERO_ST+29
    50                        ;
    51                        ;       - 8-bit variables and constants:
    52             000000BE   BUFIDX          .EQU    PGZERO_ST+30            ;Buffer index
    53             000000BF   BUFLEN          .EQU    PGZERO_ST+31            ;Buffer length
    54             000000C0   IDX             .EQU    PGZERO_ST+32            ;Temp Indexing
    55             000000C1   IDY             .EQU    PGZERO_ST+33            ;Temp Indexing
    56             000000C2   TEMP1           .EQU    PGZERO_ST+34            ;Temp - Code Conversion routines
    57             000000C3   TEMP2           .EQU    PGZERO_ST+35            ;Temp - Memory/EEPROM/SREC routines - Disassembler
    58             000000C4   TEMP3           .EQU    PGZERO_ST+36            ;Temp - EEPROM/SREC routines
    59             000000C5   CMDFLAG         .EQU    PGZERO_ST+37            ;Command Flag, bit specific, used by many routines
    60             000000C6   OPXMDM          .EQU    PGZERO_ST+38            ;Saved Opcode/Xmodem Flag variable
    61                        ;
    62                        ;       - Xmodem transfer variables
    63             000000C7   CRCHI           .EQU    PGZERO_ST+39            ;CRC hi byte  (two byte variable)
    64             000000C8   CRCLO           .EQU    PGZERO_ST+40            ;CRC lo byte - Operand in Disassembler
    65             000000C9   CRCCNT          .EQU    PGZERO_ST+41            ;CRC retry count - Operand in Disassembler
    66             000000CA   PTRL            .EQU    PGZERO_ST+42            ;Data pointer lo byte - Mnemonic in Disassembler
    67             000000CB   PTRH            .EQU    PGZERO_ST+43            ;Data pointer hi byte - Mnemonic in Disassembler
    68             000000CC   BLKNO           .EQU    PGZERO_ST+44            ;Block number
    69                        ;
    70                        ;        - Macro Loop Counter variables
    71             000000CD   LPCNTL          .EQU    PGZERO_ST+45            ;Loop Count low byte
    72             000000CE   LPCNTH          .EQU    PGZERO_ST+46            ;Loop Count high byte
    73                        ;
    74                        ;       - Spare Monitor byte for future use
    75             000000CF   SPARE_M0        .EQU    PGZERO_ST+47            ;Spare Monitor page zero byte
    76                        ;
    77                        ;       - BIOS variables, pointers, flags located at top of Page Zero
    78             000000D0   BIOS_PG0        .EQU    PGZERO_ST+48            ;Start of BIOS page 0 use ($D0-$FF, 48 bytes)
    79                        ;
    80                        ;       - BRK handler routine
    81             000000D0   PCL             .EQU    BIOS_PG0+00             ;Program Counter Low index
    82             000000D1   PCH             .EQU    BIOS_PG0+01             ;Program Counter High index
    83             000000D2   PREG            .EQU    BIOS_PG0+02             ;Temp Status Reg
    84             000000D3   SREG            .EQU    BIOS_PG0+03             ;Temp Stack ptr
    85             000000D4   YREG            .EQU    BIOS_PG0+04             ;Temp Y Reg
    86             000000D5   XREG            .EQU    BIOS_PG0+05             ;Temp X Reg
    87             000000D6   AREG            .EQU    BIOS_PG0+06             ;Temp A Reg
    88                        ;
    89                        ;       - 28L92 IRQ handler pointers and status
    90             000000D7   ICNT_A          .EQU    BIOS_PG0+07             ;Input buffer count
    91             000000D8   IHEAD_A         .EQU    BIOS_PG0+08             ;Input buffer head pointer
    92             000000D9   ITAIL_A         .EQU    BIOS_PG0+09             ;Input buffer tail pointer
    93             000000DA   OCNT_A          .EQU    BIOS_PG0+10             ;Output buffer count
    94             000000DB   OHEAD_A         .EQU    BIOS_PG0+11             ;Output buffer head pointer
    95             000000DC   OTAIL_A         .EQU    BIOS_PG0+12             ;Output buffer tail pointer
    96                        ;
    97             000000DD   ICNT_B          .EQU    BIOS_PG0+13             ;Input buffer count
    98             000000DE   IHEAD_B         .EQU    BIOS_PG0+14             ;Input buffer head pointer
    99             000000DF   ITAIL_B         .EQU    BIOS_PG0+15             ;Input buffer tail pointer
   100             000000E0   OCNT_B          .EQU    BIOS_PG0+16             ;Output buffer count
   101             000000E1   OHEAD_B         .EQU    BIOS_PG0+17             ;Output buffer head pointer
   102             000000E2   OTAIL_B         .EQU    BIOS_PG0+18             ;Output buffer tail pointer
   103                        ;
   104             000000E3   UART_SRT_A      .EQU    BIOS_PG0+19             ;SC28L92 Status Register Port A
   105             000000E4   UART_SRT_B      .EQU    BIOS_PG0+20             ;SC28L92 Status Register Port B
   106             000000E5   UART_IRT        .EQU    BIOS_PG0+21             ;SC28L92 Interrupt Status byte
   107                        ;
   108                        ;       - Real-Time Clock variables
  Thu Jan 27 2022  6:08                                                                                                    Page 4


   109                        ; These are repurposed for adding a Realtime clock chip (DS1501/DS1511)
   110                        ; The Ticks, Seconds, Minutes and Hours remain the same in function.
   111                        ; The 16-bit Days variable is replaced however.
   112                        ; - The DAY_DATE is a new variable. To minimize Page Zero usage, it has two functions
   113                        ;       Bits 0-4 represent the days of the Month 1-31
   114                        ;       Bits 5-7 represent the Day of the Week, 1-7 (Saturday=1)
   115                        ; The Months are handled by the upper 4 bits of the MONTH_YEAR variable
   116                        ; The Century is handled by a the Year (0-255) and the lower 4 bits of the MONTH_YEAR variable
   117             000000E6   TICKS           .EQU    BIOS_PG0+22             ;Number of timer countdowns = 1 second (100)
   118             000000E7   SECS            .EQU    BIOS_PG0+23             ;Seconds: 0-59
   119             000000E8   MINS            .EQU    BIOS_PG0+24             ;Minutes: 0-59
   120             000000E9   HOURS           .EQU    BIOS_PG0+25             ;Hours: 0-23
   121             000000EA   DAY_DATE        .EQU    BIOS_PG0+26             ;Day: (bits 5-7) Date: (bits 0-4)
   122             000000EB   MONTH_CENTURY   .EQU    BIOS_PG0+27             ;Month: (bits 4-7) Century: (bits 0-3)
   123             000000EC   YEAR            .EQU    BIOS_PG0+28             ;Century 0-255 plus 4 bits as noted above
   124             000000ED   RTC_TEMP        .EQU    BIOS_PG0+29             ;Temp work byte for updating shared variables
   125                        ;
   126                        ;       - Delay Timer variables
   127             000000EE   MSDELAY         .EQU    BIOS_PG0+30             ;Timer delay countdown byte (255 > 0)
   128             000000EF   SETMS           .EQU    BIOS_PG0+31             ;Set timeout for delay routines - BIOS use only
   129             000000F0   DELLO           .EQU    BIOS_PG0+32             ;Delay value BIOS use only
   130             000000F1   DELHI           .EQU    BIOS_PG0+33             ;Delay value BIOS use only
   131                        ;
   132                        ;       - Count variables for 10ms benchmark timing
   133             000000F2   MS10_CNT        .EQU    BIOS_PG0+34             ;10ms Count variable
   134             000000F3   SECL_CNT        .EQU    BIOS_PG0+35             ;Seconds Low byte count
   135             000000F4   SECH_CNT        .EQU    BIOS_PG0+36             ;Seconds High byte count
   136                        ;
   137                        ;       - Address and pointers for IDE Interface
   138             000000F5   LBA_ADDR_LOW    .EQU    BIOS_PG0+37             ;LBA Transfer Address low byte
   139             000000F6   LBA_ADDR_HIGH   .EQU    BIOS_PG0+38             ;LBA Transfer Address high byte
   140                        ;
   141             000000F7   LBA_XFER_CNT    .EQU    BIOS_PG0+39             ;LBA Transfer Count 1-xx (check RAM space!)
   142             000000F8   LBA_LOW_BYTE    .EQU    BIOS_PG0+40             ;LBA Block number bits 0-7
   143             000000F9   LBA_HIGH_BYTE   .EQU    BIOS_PG0+41             ;LBA Block number bits 8-15
   144             000000FA   LBA_EXT_BYTE    .EQU    BIOS_PG0+42             ;LBA Block number bits 16-23
   145                        ;
   146             000000FB   BIOS_XFERL      .EQU    BIOS_PG0+43             ;BIOS Move Routine low byte
   147             000000FC   BIOS_XFERH      .EQU    BIOS_PG0+44             ;BIOS Move Routine high byte
   148             000000FD   BIOS_XFERC      .EQU    BIOS_PG0+45             ;BIOS Block Count moved (needs to be set)
   149                        ;
   150             000000FE   IDE_STATUS_RAM  .EQU    BIOS_PG0+46             ;IDE RAM-Based Status
   151                        ;
   152                        ;       - Timer/Counter Match flag for Delay/Benchmark
   153             000000FF   MATCH           .EQU    BIOS_PG0+47             ;Bit7 used for Delay, Bit6 used for Benchmark
   154                                                                        ;Bits 3,2,1 used for IDE Interrupt Handler
   155                        ;
   156                        ;       - Default for RTC tick count - number of IRQs for 1 second
   157             00000064   DF_TICKS        .EQU    100                     ;Timer is 10 milliseconds (100 x 10ms = 1 second)
   158                        ;
   159                        ;**************************************************************************************************
   160             00000200   IBUF_A          .EQU    $0200                   ;Console Input Buffer - 128 bytes
   161             00000280   OBUF_A          .EQU    $0280                   ;Console Output Buffer - 128 bytes
   162                        ;
   163             00000400   IBUF_B          .EQU    $0400                   ;Alternate Input Buffer - 128 bytes
   164             00000480   OBUF_B          .EQU    $0480                   ;Alternate Output Buffer - 128 bytes
   165                        ;**************************************************************************************************
   166             00000300   SOFTVEC         .EQU    $0300                   ;Start of soft vectors
   167                        ;The Interrupt structure is vector based. During startup, Page $03 is loaded from ROM.
   168                        ; The soft vectors are structured to allow inserting additional routines either before
   169                        ; or after the ROM based routines. This allows flexibility and changing of routine priority.
   170                        ;
   171                        ;The main set of vectors occupy the first 16 bytes of Page $03. The ROM handler for
  Thu Jan 27 2022  6:08                                                                                                    Page 5


   172                        ; NMI, BRK and IRQ jump to the first 3 vectors. The following 3 vectors are loaded with
   173                        ; return addresses to the ROM handler for each. The following 2 vectors are the cold and
   174                        ; warm entry points for the Monitor. After the basic initialization, the monitor is entered.
   175                        ;
   176                        ;The following vector set allows inserts, pre or post for NMI/BRK/IRQ. There a total of 8 inserts
   177                        ; which occupy 16 bytes. They can be used as required.
   178                        ; Currently, VECINSRT0 will be used if an IDE Controller is detected.
   179                        ;
   180             00000300   NMIVEC0         .EQU    SOFTVEC+00              ;NMI Vector Entry 0
   181             00000302   BRKVEC0         .EQU    SOFTVEC+02              ;BRK Vector Entry 0
   182             00000304   IRQVEC0         .EQU    SOFTVEC+04              ;IRQ Vector Entry 0
   183                        ;
   184             00000306   NMIRTVEC0       .EQU    SOFTVEC+06              ;NMI Vector Return 0
   185             00000308   BRKRTVEC0       .EQU    SOFTVEC+08              ;BRK Vector Return 0
   186             0000030A   IRQRTVEC0       .EQU    SOFTVEC+10              ;IRQ Vector Return 0
   187                        ;
   188             0000030C   CLDMNVEC0       .EQU    SOFTVEC+12              ;Monitor Cold Entry Vector 0
   189             0000030E   WRMMNVEC0       .EQU    SOFTVEC+14              ;Monitor Warm Entry Vector 0
   190                        ;
   191             00000310   VECINSRT0       .EQU    SOFTVEC+16              ;1st Vector Insert
   192             00000312   VECINSRT1       .EQU    SOFTVEC+18              ;2nd Vector Insert
   193             00000314   VECINSRT2       .EQU    SOFTVEC+20              ;3rd Vector Insert
   194             00000316   VECINSRT3       .EQU    SOFTVEC+22              ;4th Vector Insert
   195             00000318   VECINSRT4       .EQU    SOFTVEC+24              ;5th Vector Insert
   196             0000031A   VECINSRT5       .EQU    SOFTVEC+26              ;6th Vector Insert
   197             0000031C   VECINSRT6       .EQU    SOFTVEC+28              ;7th Vector Insert
   198             0000031E   VECINSRT7       .EQU    SOFTVEC+30              ;8th Vector Insert
   199                        ;
   200                        ;**************************************************************************************************
   201                        ;
   202                        ;Soft Config values below are loaded from ROM and are the default I/O setup Configuration data that
   203                        ; the INIT_x routines use. As a result, you can write a routine to change the I/O Configuration
   204                        ; data and use the standard ROM routines to initialize the I/O without restarting or changing ROM
   205                        ; A Reset (HW or coded) will reinitialize the I/O with the ROM default I/O Configuration.
   206             00000320   SOFTCFG         .EQU    SOFTVEC+32              ;Start of hardware Config parameters
   207                        ;
   208                        ;There are a total of 32 Bytes Configuration data reserved starting at $0320
   209             00000320   LOAD_28L92      .EQU    SOFTCFG+00              ;SC28L92 Soft Config Data
   210             0000033C   LOAD_IDE        .EQU    SOFTCFG+28              ;IDE/CF-Card Soft Config Data
   211                        ;
   212                        ;Search Buffer is 16 bytes in length. Used to hold search string for text or hex data
   213             00000340   SRCHBUFF        .EQU    SOFTCFG+32              ;Located in Page $03 following Hardware Config data
   214                        ;
   215                        ;Xmodem/CRC Loader also provides Motorola S19 Record sense and load. Designed to handle the S19
   216                        ; records from the WDC Assembler/Linker package. This requires a 44 byte buffer to parse each valid
   217                        ; S1 record, located just before the 132 Byte Xmodem frame buffer. Total Buffer space for the
   218                        ; Xmodem/CRC Loader is 176 bytes
   219                        ;
   220                        ;Valid S-record headers are "S1" and "S9". For S1, the maximum length is "$19" hex. The last S1
   221                        ; record can be less. S9 record is always the last record with no data. WDC Linker also appends
   222                        ; a CR/LF to the end of each record for a total of 44 bytes.
   223             00000350   SRBUFF          .EQU    SOFTCFG+48              ;S-Record buffer, up to 44 bytes in length
   224                        ;
   225                        ;Xmodem frame buffer. The entire Xmodem frame is buffered here and then checked for proper header
   226                        ; and frame number, CRC-16 on the data, then moved to user RAM.
   227             0000037C   RBUFF           .EQU    SOFTCFG+92              ;Xmodem temp 132 byte receive buffer
   228                        ;
   229                        ;Page $03 is completely allocated for Buffers, Config Data and Vector pointers.
   230                        ; Some of the buffer space can be used as needed, provided any required Monitor functions are NOT
   231                        ; being used concurrently.
   232                        ;
   233                        ;Page $05 is used for the Realtime Clock NVRAM read and write routines
   234             00000500   NVRAM_DATA      .EQU    $0500                   ;NVRAM Data Buffer address
  Thu Jan 27 2022  6:08                                                                                                    Page 6


   235                        ;
   236                        ;Pages $06 - $07 are used for the IDE device Block Buffer (512 bytes)
   237             00000600   LBA_BUFFER      .EQU    $0600                   ;Default IDE Block Buffer address
   238                        ; 
   239                        ;XMODEM Control Character Constants
   240             00000001   SOH             .EQU    $01                     ;Start of Block Header
   241             00000004   EOT             .EQU    $04                     ;End of Text marker
   242             00000006   ACK             .EQU    $06                     ;Good Block Acknowledge
   243             00000015   NAK             .EQU    $15                     ;Bad Block Acknowledged
   244             00000018   CAN             .EQU    $18                     ;Cancel character
   245                        ;
   246                        ;**************************************************************************************************
   247                        ;RAM location used for the EEPROM Byte Write routine
   248                        ; EEPROM is the address offset of the AT28BV256 in the hardware memory map and added to the
   249                        ; EEPROM address locations required to unlock the AT28BV256 for insitu programming. For more
   250                        ; information, refer to the AT28BV256 Datasheet.
   251                        ;
   252             00000070   BURN_BYTE       .EQU    $0070                   ;Page 0 RAM for EEPROM BYTE write routine
   253             00008000   EEPROM          .EQU    $8000                   ;Offset to EEPROM in hardware
   254                        ;**************************************************************************************************
   255                        ;DOS/65 can be called from the Monitor via the Ctrl-B command.
   256                        ;The start location is just added here for convenience, but should be changed if needed.
   257                        ;
   258             0000D680   DOS_65          .EQU    $D680                   ;Default location to Boot DOS/65 (optional)
   259                        ;**************************************************************************************************
   260             0000FE00   IOPAGE          .EQU    $FE00                   ;I/O Page Base Start Address
   261                        ;**************************************************************************************************
   262             0000FE80   SC28L92_BASE    .EQU    IOPAGE+$80              ;Beginning of Console UART address
   263                        ;
   264             0000FE80   UART_MODEREG_A  .EQU    SC28L92_BASE+$00        ;MR0/MR1/MR2 Port A sequential (Read/Write)
   265             0000FE81   UART_STATUS_A   .EQU    SC28L92_BASE+$01        ;UART Status Register Port A (READ)
   266             0000FE81   UART_CLKSEL_A   .EQU    SC28L92_BASE+$01        ;UART Clock Select Port A (WRITE)
   267             0000FE82   UART_RES_A      .EQU    SC28L92_BASE+$02        ;UART Reserved Port A (READ)
   268             0000FE82   UART_COMMAND_A  .EQU    SC28L92_BASE+$02        ;UART Command Register Port A (WRITE)
   269             0000FE83   UART_RECEIVE_A  .EQU    SC28L92_BASE+$03        ;UART Receive Register Port A (READ)
   270             0000FE83   UART_TRANSMIT_A .EQU    SC28L92_BASE+$03        ;UART Transmit Register Port A (WRITE)
   271                        ;
   272             0000FE84   UART_PORT_CHG   .EQU    SC28L92_BASE+$04        ;UART Input Port Change Register (READ)
   273             0000FE84   UART_AUXCR      .EQU    SC28L92_BASE+$04        ;UART Aux Command Register (WRITE)
   274             0000FE85   UART_ISR        .EQU    SC28L92_BASE+$05        ;UART Interrupt Status Register (READ)
   275             0000FE85   UART_IMR        .EQU    SC28L92_BASE+$05        ;UART Interrupt Mask Register (WRITE)
   276                        ;
   277             0000FE86   UART_CNTU       .EQU    SC28L92_BASE+$06        ;Counter/Timer Upper Register (READ)
   278             0000FE86   UART_CNTUP      .EQU    SC28L92_BASE+$06        ;Counter/Timer Upper Preset Register (WRITE)
   279             0000FE87   UART_CNTL       .EQU    SC28L92_BASE+$07        ;Counter/Timer Lower Register (READ)
   280             0000FE87   UART_CNTLP      .EQU    SC28L92_BASE+$07        ;Counter/Timer Lower Preset Register (WRITE)
   281                        ;
   282             0000FE88   UART_MODEREG_B  .EQU    SC28L92_BASE+$08        ;MR0/MR1/MR2 Port B sequential Read/Write
   283             0000FE89   UART_STATUS_B   .EQU    SC28L92_BASE+$09        ;UART Status Register Port B (READ)
   284             0000FE89   UART_CLKSEL_B   .EQU    SC28L92_BASE+$09        ;UART Clock Select Port B (WRITE)
   285             0000FE8A   UART_RES_B      .EQU    SC28L92_BASE+$0A        ;UART Reserved Port B (READ)
   286             0000FE8A   UART_COMMAND_B  .EQU    SC28L92_BASE+$0A        ;UART Command Register Port B (WRITE)
   287             0000FE8B   UART_RECEIVE_B  .EQU    SC28L92_BASE+$0B        ;UART Receive Register Port B (READ)
   288             0000FE8B   UART_TRANSMIT_B .EQU    SC28L92_BASE+$0B        ;UART Transmit Register Port B (WRITE)
   289                        ;
   290             0000FE8C   UART_MISC       .EQU    SC28L92_BASE+$0C        ;UART Miscellaneous Register Intel (Read/Write)
   291             0000FE8D   UART_INPUT_PORT .EQU    SC28L92_BASE+$0D        ;UART Input Port Register (READ)
   292             0000FE8D   UART_OUT_CFG    .EQU    SC28L92_BASE+$0D        ;UART Ouput Port Config Register (WRITE)
   293             0000FE8E   UART_START_CNT  .EQU    SC28L92_BASE+$0E        ;UART Start Counter Command (READ)
   294             0000FE8E   UART_SOPR_CMD   .EQU    SC28L92_BASE+$0E        ;UART Set Output Port Bits Register (WRITE)
   295             0000FE8F   UART_STOP_CNT   .EQU    SC28L92_BASE+$0F        ;UART Stop Counter Command (READ)
   296             0000FE8F   UART_ROPR_CMD   .EQU    SC28L92_BASE+$0F        ;UART Reset Output Port Bits Register (WRITE)
   297                        ;
  Thu Jan 27 2022  6:08                                                                                                    Page 7


   298                        ;Additional Hardware
   299                        ; Adding BIOS definitions for Realtime Clock chip - DS1511
   300                        ; uses the first 16 addresses for RTC registers and basic operation
   301                        ; uses two addresses for extended RAM of 256 bytes
   302                        ;
   303                        ; upper addresses are used for a 16-bit IDE interface (below)
   304                        ; NOTE: offset $11 and $12 are unused (reserved per the datasheet).
   305                        ;
   306             0000FE60   RTC_IDE_BASE    .EQU    IOPAGE+$60              ;Beginning of Realtime Clock address
   307                        ;
   308             0000FE60   RTC_SECONDS     .EQU    RTC_IDE_BASE+$00        ;Seconds in BCD 00-59
   309             0000FE61   RTC_MINUTES     .EQU    RTC_IDE_BASE+$01        ;Minutes in BCD 00-59
   310             0000FE62   RTC_HOURS       .EQU    RTC_IDE_BASE+$02        ;Hours in BCD 00-23
   311             0000FE63   RTC_DAY         .EQU    RTC_IDE_BASE+$03        ;Day in BCD 1-7
   312             0000FE64   RTC_DATE        .EQU    RTC_IDE_BASE+$04        ;Date in BCD 1-31
   313             0000FE65   RTC_MONTH       .EQU    RTC_IDE_BASE+$05        ;Month in BCD 1-12
   314             0000FE66   RTC_YEAR        .EQU    RTC_IDE_BASE+$06        ;Year in BCD 00-99
   315             0000FE67   RTC_CENTURY     .EQU    RTC_IDE_BASE+$07        ;Century in BCD 00-39
   316                        ;
   317             0000FE68   RTC_ALARM_SEC   .EQU    RTC_IDE_BASE+$08        ;Alarm Seconds in BCD 00-59
   318             0000FE69   RTC_ALARM_MIN   .EQU    RTC_IDE_BASE+$09        ;Alarm Minutes in BCD 00-59
   319             0000FE6A   RTC_ALARM_HRS   .EQU    RTC_IDE_BASE+$0A        ;Alarm Hours in BCD 00-23
   320             0000FE6B   RTC_ALARM_DYDT  .EQU    RTC_IDE_BASE+$0B        ;Alarm Day/Date in BCD 0-7 1-31
   321             0000FE6C   RTC_WTCHDOG_01  .EQU    RTC_IDE_BASE+$0C        ;Watchdog 0.1 / 0.01 Seconds in BCD 00-99
   322             0000FE6D   RTC_WTCHDOG_10  .EQU    RTC_IDE_BASE+$0D        ;Watchdog 10 / 1 Seconds in BCD 00-99
   323                        ;
   324             0000FE6E   RTC_CONTROL_A   .EQU    RTC_IDE_BASE+$0E        ;Control A
   325             0000FE6F   RTC_CONTROL_B   .EQU    RTC_IDE_BASE+$0F        ;Control B
   326             0000FE70   RTC_RAM_ADDR    .EQU    RTC_IDE_BASE+$10        ;Extended RAM address
   327             0000FE73   RTC_RAM_DATA    .EQU    RTC_IDE_BASE+$13        ;Extended RAM data
   328                        ;
   329                        ; Adding BIOS definitions for 16-bit IDE interface
   330                        ; uses two addresses for Upper Byte Latch read / write
   331                        ; uses eight addresses for Command Block Registers
   332                        ; uses two addresses for Control Block Registers
   333                        ;
   334             0000FE74   IDE_16_READ     .EQU    RTC_IDE_BASE+$14        ;Upper byte Read address
   335             0000FE75   IDE_16_WRITE    .EQU    RTC_IDE_BASE+$15        ;Upper byte Write address
   336                        ;
   337                        ; Adding BIOS definitions for IDE Controller (HARD DISK, Flash Module, etc.)
   338                        ; Hardware Adapter provides a 16-bit IDE Port per:
   339                        ;  Seagate ATA Interface Reference Manual 36111-001, Rev. C (21st May 1993)
   340                        ;
   341                        ; Control Block Registers
   342             0000FE76   IDE_ALT_STATUS  .EQU    RTC_IDE_BASE+$16        ;Alternate Status Register (READ)
   343             0000FE76   IDE_DEV_CTRL    .EQU    RTC_IDE_BASE+$16        ;Device Control Register (WRITE)
   344             0000FE77   IDE_DRV_ADDR    .EQU    RTC_IDE_BASE+$17        ;Drive Address Register (READ)
   345                        ;
   346                        ; Command Block Registers
   347             0000FE78   IDE_DATA        .EQU    RTC_IDE_BASE+$18        ;Data Register (R/W)
   348             0000FE79   IDE_ERROR       .EQU    RTC_IDE_BASE+$19        ;Error Register (READ)
   349             0000FE79   IDE_FEATURE     .EQU    RTC_IDE_BASE+$19        ;Feature Register (WRITE)
   350             0000FE7A   IDE_SCT_CNT     .EQU    RTC_IDE_BASE+$1A        ;Sector Count Register
   351             0000FE7B   IDE_SCT_NUM     .EQU    RTC_IDE_BASE+$1B        ;Sector Number Register
   352             0000FE7C   IDE_CYL_LOW     .EQU    RTC_IDE_BASE+$1C        ;Cylinder Low Register
   353             0000FE7D   IDE_CYL_HIGH    .EQU    RTC_IDE_BASE+$1D        ;Cylinder High Register
   354             0000FE7E   IDE_DRV_HEAD    .EQU    RTC_IDE_BASE+$1E        ;Drive/Head Register
   355             0000FE7F   IDE_STATUS      .EQU    RTC_IDE_BASE+$1F        ;Status Register (READ)
   356             0000FE7F   IDE_COMMAND     .EQU    RTC_IDE_BASE+$1F        ;Command Register (WRITE)
   357                        ;
   358                        ;**************************************************************************************************
   359                                .END
    76                        ;
  Thu Jan 27 2022  6:08                                                                                                    Page 8


    77                        ;**************************************************************************************************
    78                        ;       - Monitor JUMP table: 32 JUMP calls are Defined, with one Call (02) currently Reserved.
    79                        ;
    80             0000E000   M_COLD_MON      .EQU    $E000           ;Call 00        Monitor Cold Start
    81             0000E003   M_WARM_MON      .EQU    $E003           ;Call 01        Monitor Warm Start
    82                        ;
    83             0000E006   M_RESERVE2      .EQU    $E006           ;Call 02        Reserved
    84                        ;
    85             0000E009   M_MOVE_RAM      .EQU    $E009           ;Call 03        Move Memory
    86             0000E00C   M_FILL_LP       .EQU    $E00C           ;Call 04        Fill Memory
    87             0000E00F   M_BSOUT         .EQU    $E00F           ;Call 05        Send Backspace
    88             0000E012   M_XMDM_SAVE     .EQU    $E012           ;Call 06        Xmodem Save Entry
    89             0000E015   M_XMDM_LOAD     .EQU    $E015           ;Call 07        Xmodem Load Entry
    90             0000E018   M_BENCH         .EQU    $E018           ;Call 08        Benchmark Start
    91             0000E01B   M_QUITB         .EQU    $E01B           ;Call 09        Benchmark Stop/End
    92             0000E01E   M_TIME          .EQU    $E01E           ;Call 10        System Date/Time
    93             0000E021   M_PRSTAT1       .EQU    $E021           ;Call 11        CPU Status Display
    94             0000E024   M_DIS_LINE      .EQU    $E024           ;Call 12        Disassemble Line of Code
    95             0000E027   M_INCINDEX      .EQU    $E027           ;Call 13        Increment Index by 1
    96             0000E02A   M_DECINDEX      .EQU    $E02A           ;Call 14        Decrement Index by 1
    97             0000E02D   M_RDLINE        .EQU    $E02D           ;Call 15        Read Line from Terminal
    98             0000E030   M_RDCHAR        .EQU    $E030           ;Call 16        Read Character from Terminal
    99             0000E033   M_HEXIN2        .EQU    $E033           ;Call 17        Hex input 2 characters
   100             0000E036   M_HEXIN4        .EQU    $E036           ;Call 18        Hex input 4 characters
   101             0000E039   M_HEX2ASC       .EQU    $E039           ;Call 19        Convert Hex to ASCII
   102             0000E03C   M_BIN2ASC       .EQU    $E03C           ;Call 20        Convert Binary to ASCII
   103             0000E03F   M_ASC2BIN       .EQU    $E03F           ;Call 21        Convert ASCII to Binary
   104             0000E042   M_BEEP          .EQU    $E042           ;Call 22        Send BEEP to Terminal
   105             0000E045   M_DOLLAR        .EQU    $E045           ;Call 23        Send $ to Terminal
   106             0000E048   M_CROUT         .EQU    $E048           ;Call 24        Send C/R to Terminal
   107             0000E04B   M_SPC           .EQU    $E04B           ;Call 25        Send ASCII Space to Terminal
   108             0000E04E   M_PRBYTE        .EQU    $E04E           ;Call 26        Print Byte to Terminal
   109             0000E051   M_PRWORD        .EQU    $E051           ;Call 27        Print Word to Terminal
   110             0000E054   M_PRASC         .EQU    $E054           ;Call 28        Print ASCII to Terminal
   111             0000E057   M_PROMPT        .EQU    $E057           ;Call 29        Send Message by number to Terminal
   112             0000E05A   M_PROMPTR       .EQU    $E05A           ;Call 30        Send Message by address to Terminal
   113             0000E05D   M_CONTINUE      .EQU    $E05D           ;Call 31        Y/N Prompt to Continue Command
   114                        ;
   115                        ;**************************************************************************************************
   116                                .ORG    $F800   ;2KB reserved for BIOS, I/O device selects (160 bytes)                    *
   117                        ;**************************************************************************************************
   118                        ;                               START OF BIOS CODE                                                *
   119                        ;**************************************************************************************************
   120                        ;C02BIOS version used here is 4.01 (updated release)
   121                        ; Contains the base BIOS routines in top 2KB of EEPROM
   122                        ; - Input/Feedback from "BDD" - modified CHRIN/CHROUT I/O routines - saves 12 bytes
   123                        ; - $F800 - $F9FF 512 bytes for BIOS SC28L92, NMI Panic routine
   124                        ; - $FA00 - $FDFF reserved for BIOS expansion (1KB)
   125                        ; - $FE00 - $FE7F reserved for HW (4-I/O selects, 32 bytes wide)
   126                        ; - $FE80 - $FE9F SC28L92 DUART (32 bytes wide, only 16 bytes used)
   127                        ; - $FEA0 - $FEFF used for Vector and Hardware configuration data
   128                        ; - $FF00 - $FFFF JMP table, CPU startup, NMI/BRK/IRQ pre-post routines, Page $03 init, BIOS msg
   129                        ;
   130                        ; UPDATES:
   131                        ; Note: C02BIOS 3.04 is the base for 4.0x.
   132                        ;
   133                        ; Fixed IRQ enable for IDE controller. Also streamlined some startup routines. 11th Oct 2020
   134                        ; Eliminates IDE byte swapping to ensure compatibility with standard formats. 20th January 2021
   135                        ; Allocate $0400-$04FF for second UART buffer space. 5th February 2021
   136                        ; Default IDE Block buffer at $0600-$07FF. 5th February 2021
   137                        ; Default RTC NVRAM buffer space at $0500-$05FF. 5th February 2021
   138                        ; Panic Routine changed, no longer saves multiple pages, just restores system. 5th February 2021
   139                        ; New routine to Start Benchmark Counter. Allows counter Start/Stop (pause). 5th February 2021
  Thu Jan 27 2022  6:08                                                                                                    Page 9


   140                        ; Some minor cleanup and fixed a few bugs in the RTC and IDE routines. 14th May 2021
   141                        ; Update Init and ISR routines to support NXP SC28L92 DUART, both ports and timer. 31st August 2021
   142                        ; Update Character I/O routines for Serial Ports. Supports on-chip FIFOs Rcv/Xmt. 14th October 2021
   143                        ; Updates to support IDE as Hitachi MicroDrive (3.3V prototype) 9th August 2021
   144                        ; Bios 4.00 and later now support multiple block transfers to/from IDE device 13th September 2021
   145                        ; - note: Removed Extended Delay routine, not ever used except for testing.
   146                        ;
   147                        ; Note: C02BIOS 4.01 Updates 17th October, 2021
   148                        ;
   149                        ; Streamlined IDE Detection, Initialize and Reset routines.
   150                        ; - Recalibrate Command removed from Detection, Diagnostics only are run.
   151                        ; - Likewise, Diagnositcs removed from Reset command, Recalibrate only is done.
   152                        ; - Removed detection for LBA support, as the Hitachi 3K8 Microdrive supports this natively.
   153                        ;
   154                        ; Added support for Receive/Transmit FIFOs for SC28L92 DUART.
   155                        ;
   156                        ;**************************************************************************************************
   157                        ; The following 32 functions are provided by BIOS via the JMP Table
   158                        ; $FF27 - $FF2A are Reserved for future expansion (1 available)
   159                        ;
   160                        ; $FF00 IDE_RESET       ;Reset IDE Controller (Recalibrate Command)
   161                        ; $FF03 IDE_GET_STAT    ;Get Status and Error code
   162                        ; $FF06 IDE_IDENTIFY    ;Load IDE Identity Data at $0600
   163                        ; $FF09 IDE_READ_LBA    ;Read LBA into memory
   164                        ; $FF0C IDE_WRITE_LBA   ;Write LBA from memory
   165                        ; $FF0F IDE_VERFY_LBA   ;Verify LBA from last Read/Write
   166                        ; $FF12 IDE_SET_LBA     ;Set LBA number (24-bit support only)
   167                        ; $FF15 IDE_SET_ADDR    ;Set LBA transfer address (16-bit plus block count)
   168                        ; $FF18 IDE_EN_CACHE    ;Enable IDE Write Cache
   169                        ; $FF1B DIS_CACHE JMP   ;Disable IDE Write Cache
   170                        ;
   171                        ; $FF1E RTC_NVRD        ;Read NVRAM (256 bytes) from RTC to memory (16-bit)
   172                        ; $FF21 RTC_NVWR        ;Write NVRAM (256 bytes) from memory to RTC (16-bit)
   173                        ; $FF24 RTC_INIT        ;Initialize software RTC from hardware RTC
   174                        ;
   175                        ; $FF27 CHRIN2          ;Data input from aux port
   176                        ; $FF2A CHROUT2         ;Data output to aux port
   177                        ;
   178                        ; $FF2D CNT_INIT        ;Reset Benchmark timing counters/Start 10ms benchmark timer
   179                        ; $FF30 CNT_STRT        ;Start 10ms benchmark timing counter
   180                        ; $FF33 CNT_STOP        ;Stop 10ms benchmark timing counter
   181                        ;
   182                        ; $FF36 CHRIN_NW        ;Data input from console, no waiting, clear carry if none
   183                        ; $FF39 CHRIN           ;Data input from console
   184                        ; $FF3C CHROUT          ;Data output to console
   185                        ;
   186                        ; $FF3F SET_DLY         ;Set delay value for milliseconds and 16-bit counter
   187                        ; $FF42 EXE_MSDLY       ;Execute millisecond delay 1-256 * 10 milliseconds
   188                        ; $FF45 EXE_LGDLY       ;Execute long delay; millisecond delay * 16-bit count
   189                        
   190                        ; $FF48 Reserved        ;Reserved for future expansion
   191                        ;
   192                        ; $FF4B INIT_VEC        ;Initialize soft vectors at $0300 from ROM
   193                        ; $FF4E INIT_CFG        ;Initialize soft config values at $0320 from ROM
   194                        ;
   195                        ; $FF51 INIT_28L92      ;Initialize SC28L92 console 38.4K, 8-N-1 RTS/CTS
   196                        ; $FF54 RESET_28L92     ;Reset SC28L92 - called before INIT_28L92
   197                        ;
   198                        ; $FF57 MONWARM         ;Monitor warm start - jumps to page $03
   199                        ; $FF5A MONCOLD         ;Monitor cold start - jumps to page $03
   200                        ; $FF5D COLDSTRT        ;System cold start - RESET vector for 65C02
   201                        ;**************************************************************************************************
   202                        ;               Data In and Out routines for Console I/O buffer                                   *
  Thu Jan 27 2022  6:08                                                                                                    Page 10


   203                        ;**************************************************************************************************
   204                        ;Data Input A routines
   205                        ;CHRIN_NW uses CHRIN, returns if data is not available from the buffer with carry flag clear,
   206                        ; else returns with data in A Reg and carry flag set. CHRIN waits for data to be in the buffer,
   207                        ; then returns with carry flag set. Receive is IRQ driven/buffered with a size of 128 bytes.
   208                        ; Note: CHRIN_NW is only on Port A, which is used for a Console.
   209                        ;
   210 00:F800: 18           CHRIN_NW        CLC                     ;Clear Carry flag for no data (2)
   211 00:F801: A5 D7                        LDA     ICNT_A          ;Get buffer count (4)
   212 00:F803: D0 05                        BNE     GET_CH          ;Branch if buffer is not empty (2/3)
   213 00:F805: 60                           RTS                     ;Or return to caller (6)
   214                        ;
   215 00:F806: A5 D7        CHRIN           LDA     ICNT_A          ;Get data count (3)
   216 00:F808: F0 FC                        BEQ     CHRIN           ;If zero (no data, loop back) (2/3)
   217                        ;
   218 00:F80A: 5A           GET_CH          PHY                     ;Save Y Reg (3)
   219 00:F80B: A4 D8                        LDY     IHEAD_A         ;Get the buffer head pointer (3)
   220 00:F80D: B9 00 02                     LDA     IBUF_A,Y        ;Get the data from the buffer (4)
   221 00:F810: E6 D8                        INC     IHEAD_A         ;Increment head pointer (5)
   222 00:F812: 77 D8                        RMB7    IHEAD_A         ;Strip off bit 7, 128 bytes only (5)
   223 00:F814: C6 D7                        DEC     ICNT_A          ;Decrement the buffer count (5)
   224                        ;
   225 00:F816: 7A                           PLY                     ;Restore Y Reg (4)
   226 00:F817: 38                           SEC                     ;Set Carry flag for data available (2)
   227 00:F818: 60                           RTS                     ;Return to caller with data in A Reg (6)
   228                        ;
   229                        ;Data Output A routine: puts the data in the A Reg into the xmit buffer, data in
   230                        ; A Reg is preserved on exit. Transmit is IRQ driven/buffered with a size of 128 bytes.
   231                        ;
   232 00:F819: 5A           CHROUT          PHY                     ;Save Y Reg (3)
   233 00:F81A: A4 DA        OUTCH           LDY     OCNT_A          ;Get data output count in buffer (3)
   234 00:F81C: 30 FC                        BMI     OUTCH           ;Check buffer full, if yes, check Xmit on (2/3)
   235                        ;
   236 00:F81E: A4 DC                        LDY     OTAIL_A         ;Get the buffer tail pointer (3)
   237 00:F820: 99 80 02                     STA     OBUF_A,Y        ;Place data in the buffer (5)
   238 00:F823: E6 DC                        INC     OTAIL_A         ;Increment Tail pointer (5)
   239 00:F825: 77 DC                        RMB7    OTAIL_A         ;Strip off bit 7, 128 bytes only (5)
   240 00:F827: E6 DA                        INC     OCNT_A          ;Increment data count (5)
   241                        ;
   242 00:F829: A0 04                        LDY     #%00000100      ;Get mask for xmit on (2)
   243 00:F82B: 8C 82 FE                     STY     UART_COMMAND_A  ;Turn on xmit (4)
   244                        ;
   245 00:F82E: 7A                           PLY                     ;Restore Y Reg (4)
   246 00:F82F: 60                           RTS                     ;Return to caller (6)
   247                        ;
   248                        ;Data Input B routine
   249                        ; CHRIN waits for data to be in the buffer, then returns with data in A reg.
   250                        ; Receive is IRQ driven/buffered with a size of 128 bytes.
   251                        ;
   252 00:F830: A5 DD        CHRIN2          LDA     ICNT_B          ;Get data count (3)
   253 00:F832: F0 FC                        BEQ     CHRIN2          ;If zero (no data, loop back) (2/3)
   254                        ;
   255 00:F834: 5A                           PHY                     ;Save Y Reg (3)
   256 00:F835: A4 D8                        LDY     IHEAD_A         ;Get the buffer head pointer (3)
   257 00:F837: B9 00 04                     LDA     IBUF_B,Y        ;Get the data from the buffer (4)
   258 00:F83A: E6 DE                        INC     IHEAD_B         ;Increment head pointer (5)
   259 00:F83C: 77 DE                        RMB7    IHEAD_B         ;Strip off bit 7, 128 bytes only (5)
   260 00:F83E: C6 DD                        DEC     ICNT_B          ;Decrement the buffer count (5)
   261                        ;
   262 00:F840: 7A                           PLY                     ;Restore Y Reg (4)
   263 00:F841: 60                           RTS                     ;Return to caller with data in A Reg (6)
   264                        ;
   265                        ;Data Output B routine: puts the data in the A Reg into the xmit buffer, data in
  Thu Jan 27 2022  6:08                                                                                                    Page 11


   266                        ; A Reg is preserved on exit. Transmit is IRQ driven/buffered with a size of 128 bytes.
   267                        ;
   268 00:F842: 5A           CHROUT2         PHY                     ;Save Y Reg (3)
   269 00:F843: A4 E0        OUTCH2          LDY     OCNT_B          ;Get data output count in buffer (3)
   270 00:F845: 30 FC                        BMI     OUTCH2          ;Check against limit, loop back if full (2/3)
   271                        ;
   272 00:F847: A4 E2                        LDY     OTAIL_B         ;Get the buffer tail pointer (3)
   273 00:F849: 99 80 04                     STA     OBUF_B,Y        ;Place data in the buffer (5)
   274 00:F84C: E6 E2                        INC     OTAIL_B         ;Increment Tail pointer (5)
   275 00:F84E: 77 E2                        RMB7    OTAIL_B         ;Strip off bit 7, 128 bytes only (5)
   276 00:F850: E6 E0                        INC     OCNT_B          ;Increment data count (5)
   277                        ;
   278 00:F852: A0 04                        LDY     #%00000100      ;Get mask for xmit on (2)
   279 00:F854: 8C 8A FE                     STY     UART_COMMAND_B  ;Turn on xmit (4)
   280                        ;
   281 00:F857: 7A           SKP_XMTB        PLY                     ;Restore Y Reg (4)
   282 00:F858: 60                           RTS                     ;Return to caller (6)
   283                        ;
   284                        ;**************************************************************************************************
   285                        ;Delay Routines: SET_DLY sets up the MSDELAY value and also sets the 16-bit Long Delay
   286                        ; On entry, A Reg = 10-millisecond count, X Reg = High multiplier, Y Reg = Low multiplier
   287                        ; these values are used by the EXE_MSDLY and EXE_LGDLY routines. Minimum delay is 10ms
   288                        ; values for MSDELAY are $00-$FF ($00 = 256 times)
   289                        ; values for Long Delay are $0000-$FFFF (0-65535 times MSDELAY)
   290                        ; longest delay is 65,535*256*10ms = 16,776,960 * 0.01 = 167,769.60 seconds
   291                        ;
   292                        ;NOTE: All delay execution routines preserve registers (EXE_MSDLY, EXE_LGDLY, EXE_XLDLY)
   293                        ;
   294 00:F859: 85 EF        SET_DLY         STA     SETMS           ;Save Millisecond count
   295 00:F85B: 84 F0                        STY     DELLO           ;Save Low multiplier
   296 00:F85D: 86 F1                        STX     DELHI           ;Save High multiplier
   297 00:F85F: 60                           RTS                     ;Return to caller
   298                        ;
   299                        ;EXE MSDELAY routine is the core delay routine. It sets the MSDELAY count value from the
   300                        ; SETMS variable, enables the MATCH flag, then waits for the MATCH flag to clear.
   301                        ;
   302 00:F860: 48           EXE_MSDLY       PHA                     ;Save A Reg
   303 00:F861: F7 FF                        SMB7    MATCH           ;Set MATCH flag bit
   304 00:F863: A5 EF                        LDA     SETMS           ;Get delay seed value
   305 00:F865: 85 EE                        STA     MSDELAY         ;Set MS delay value
   306                        ;
   307 00:F867: FF FF FD     MATCH_LP        BBS7    MATCH,MATCH_LP  ;Test MATCH flag, loop until cleared
   308 00:F86A: 68                           PLA                     ;Restore A Reg
   309 00:F86B: 60                           RTS                     ;Return to caller
   310                        ;
   311                        ;EXE LONG Delay routine is the 16-bit multiplier for the MSDELAY routine.
   312                        ; It loads the 16-bit count from DELLO/DELHI, then loops the MSDELAY routine
   313                        ; until the 16-bit count is decremented to zero.
   314                        ;
   315 00:F86C: DA           EXE_LGDLY       PHX                     ;Save X Reg
   316 00:F86D: 5A                           PHY                     ;Save Y Reg
   317 00:F86E: A6 F1                        LDX     DELHI           ;Get high byte count
   318 00:F870: E8                           INX                     ;Increment by one (checks for $00 vs $FF)
   319 00:F871: A4 F0                        LDY     DELLO           ;Get low byte count
   320 00:F873: F0 06                        BEQ     SKP_DLL         ;If zero, skip to high count
   321 00:F875: 20 60 F8     DO_DLL          JSR     EXE_MSDLY       ;Call millisecond delay
   322 00:F878: 88                           DEY                     ;Decrement low count
   323 00:F879: D0 FA                        BNE     DO_DLL          ;Branch back until done
   324                        ;
   325 00:F87B: CA           SKP_DLL         DEX                     ;Decrement high byte index
   326 00:F87C: D0 F7                        BNE     DO_DLL          ;Loop back to D0_DLL (will run 256 times)
   327 00:F87E: 7A                           PLY                     ;Restore Y Reg
   328 00:F87F: FA                           PLX                     ;Restore X Reg
  Thu Jan 27 2022  6:08                                                                                                    Page 12


   329 00:F880: 60                           RTS                     ;Return to caller
   330                        ;
   331                        ;**************************************************************************************************
   332                        ;COUNTER BENCHMARK TIMING ROUTINES
   333                        ; To enable a level of benchmarking, three new routines have been added to C02BIOS version 2.05
   334                        ; Using the existing 10ms Jiffy Clock, three bytes of Page zero are used to hold the variables;
   335                        ; MS10_CNT - a 10ms count variable for 0.01 resolution of timing - resets at 100 counts (1 second)
   336                        ; SECL_CNT - a low byte seconds count
   337                        ; SECH_CNT - a high byte seconds count
   338                        ; This provides up to 65,535.99 seconds of timing with 0.01 seconds resolution
   339                        ; - the count variables reset to zero after 65,535.99 seconds!
   340                        ;
   341                        ; New routines in C02Monitor version 2.05:
   342                        ; - Start counter (calls CNT_STRT) after prompting user
   343                        ; - Stop counter (calls CNT_STOP) and displays the timing count as: XXXXX.XX Seconds.
   344                        ;
   345                        ; CNT_INIT has been added as a new BIOS call, effectively replacing CNT_STRT, as it does
   346                        ; the same thing. CNT_STRT has been changed to only set the MATCH flag to restart the timing.
   347                        ; This allows the Benchmark Timer to effectively be paused and resumed without resetting the
   348                        ; the count variables. CNT_INIT has also been added to the BIOS JUMP table.
   349                        ;
   350                        ;CNT_INIT is used to zero the timing pointers and start the benchmark timing
   351                        ;CNT_STRT is used to start the timing by setting bit 6 of the MATCH flag (new in BIOS 3.03)
   352                        ;CNT_STOP is used to stop the timing by clearing bit 6 of the MATCH flag
   353                        ; the interrupt handler for the DUART timer increments the timing variables when bit 6 of the
   354                        ; MATCH flag is active.
   355                        ;
   356 00:F881: 67 FF        CNT_INIT        RMB6    MATCH           ;Clear bit 6 of MATCH flag, ensure timing is disabled
   357 00:F883: 64 F2                        STZ     MS10_CNT        ;Zero 10ms timing count
   358 00:F885: 64 F3                        STZ     SECL_CNT        ;Zero low byte of seconds timing count
   359 00:F887: 64 F4                        STZ     SECH_CNT        ;Zero high byte of seconds timing count
   360                        ;
   361 00:F889: E7 FF        CNT_STRT        SMB6    MATCH           ;Set bit 6 of MATCH flag to enable timing
   362 00:F88B: 60                           RTS                     ;Return to caller
   363                        ;
   364 00:F88C: 67 FF        CNT_STOP        RMB6    MATCH           ;Clear bit 6 of MATCH flag to disable timing
   365 00:F88E: 60                           RTS                     ;Return to caller
   366                        ;
   367                        ;**************************************************************************************************
   368                        ;START of IDE Routines for Hitachi 3K8 MicroDrive                                                 *
   369                        ;**************************************************************************************************
   370                        ;
   371                        IDE_READ_LBA                            ;Read a Block of data from IDE device
   372                        ;
   373                        ; This routine requires loading the requested LBA into the appropriate registers and
   374                        ; issuing the READ command 20h. The LBA count supported for the BIOS are bits 0-23,
   375                        ; so bits 24-27 are always set to 0. This provides access to IDE devices up to 8GB.
   376                        ;
   377                        ; Once the registers/parameters are setup, the Read Block command is issued.
   378                        ; This results in an interrupt being generated. The ISR handles the transfer of LBA
   379                        ; data from the IDE Drive to memory.
   380                        ;
   381                        ; BIOS 4.00 and later supports multiple block transfers, increasing performance.
   382                        ;
   383                        ; The registers used are the same for read/write/verify. These are:
   384                        ;
   385                        ;       IDE_COMMAND = function requested (20h = READ LBA command)
   386                        ;       IDE_DRV_HEAD = (Upper 4 bits) used as:
   387                        ;               bit 7 = 1 per Seagate documentation
   388                        ;               bit 6 = 1 for LBA mode
   389                        ;               bit 5 = 1 per Seagate documentation
   390                        ;               bit 4 = 0 for Drive 0
   391                        ;       IDE_DRV_HEAD = LBA Address bits 27-24 (lower 4 bits) - not used, always 0000
  Thu Jan 27 2022  6:08                                                                                                    Page 13


   392                        ;       IDE_CYL_HIGH = LBA Address bits 23-16
   393                        ;       IDE_CYL_LOW = LBA Address bits 15-8
   394                        ;       IDE_SCT_NUM = LBA Address bits 7-0
   395                        ;       IDE_SCT_CNT = number of blocks to read
   396                        ;
   397 00:F88F: 20 25 F9                     JSR     IDE_SET_PARMS   ;Setup required parameters (6)
   398 00:F892: A9 20                        LDA     #$20            ;Get Read LBA command (2)
   399                        IDENT_READ                              ;Identity Command jumps to here to complete
   400 00:F894: B7 FF                        SMB3    MATCH           ;Set Read LBA bit (5)
   401 00:F896: 8D 7F FE                     STA     IDE_COMMAND     ;Send command to IDE Controller (4)
   402                        ;
   403                        LBA_RD_CMD
   404 00:F899: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register (4)
   405 00:F89C: 30 FB                        BMI     LBA_RD_CMD      ;Loop until IDE controller not Busy (2/3)
   406                        ;
   407                        LBA_RD_WAIT
   408 00:F89E: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register (4)
   409 00:F8A1: C9 50                        CMP     #$50            ;Compare for ready (2)
   410 00:F8A3: D0 04                        BNE     LBA_RD_ERR      ;If not, check for error condition (2/3)
   411                        LBA_RD_OK
   412 00:F8A5: BF FF FD                     BBS3    MATCH,LBA_RD_OK ;Wait for Read completed via ISR (5)
   413 00:F8A8: 60                           RTS                     ;Return to caller (status in A Reg) (6)
   414                        LBA_RD_ERR
   415 00:F8A9: 4A                           LSR     A               ;Shift error bit to carry (2)
   416 00:F8AA: 90 F2                        BCC     LBA_RD_WAIT     ;If clear, loop back and continue waiting (2/3)
   417                        ;
   418 00:F8AC: 37 FF                        RMB3    MATCH           ;Reset Read LBA bit (no ISR invoked) (5)
   419                        IDE_RWV_FIN
   420 00:F8AE: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register (4)
   421 00:F8B1: 85 FE                        STA     IDE_STATUS_RAM  ;Update RAM Status Register (3)
   422 00:F8B3: 60                           RTS                     ;Return to caller (6)
   423                        ;
   424                        IDE_WRITE_LBA                           ;Write a block of data to LBA
   425                        ;
   426                        ; This routine requires loading the requested LBA into the appropriate registers and
   427                        ; issuing the WRITE command 30h. The LBA count supported for the BIOS are bits 0-23,
   428                        ; so bits 24-27 are always set to 0. This provides access to IDE devices up to 8GB.
   429                        ;
   430                        ; The registers used are the same for read/write/verify. These are:
   431                        ;
   432                        ;       IDE_COMMAND = function requested (30h = WRITE LBA command)
   433                        ;       IDE_DRV_HEAD = (Upper 4 bits) used as:
   434                        ;               bit 7 = 1 per Seagate documentation
   435                        ;               bit 6 = 1 for LBA mode
   436                        ;               bit 5 = 1 per Seagate documentation
   437                        ;               bit 4 = 0 for Drive 0
   438                        ;       IDE_DRV_HEAD = LBA Address bits 27-24 (lower 4 bits) - not used, always 0000
   439                        ;       IDE_CYL_HIGH = LBA Address bits 23-16
   440                        ;       IDE_CYL_LOW = LBA Address bits 15-8
   441                        ;       IDE_SCT_NUM = LBA Address bits 7-0
   442                        ;       IDE_SCT_CNT = number of blocks to write
   443                        ;
   444 00:F8B4: 20 25 F9                     JSR     IDE_SET_PARMS   ;Setup required parameters (6)
   445                        ;
   446 00:F8B7: A7 FF                        SMB2    MATCH           ;Set Write LBA bit (5)
   447 00:F8B9: A9 30                        LDA     #$30            ;Get Write LBA command (2)
   448 00:F8BB: 8D 7F FE                     STA     IDE_COMMAND     ;Send command to IDE Controller (4)
   449                        LBA_WR_CMD
   450 00:F8BE: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register (4)
   451 00:F8C1: 30 FB                        BMI     LBA_WR_CMD      ;Loop until IDE controller not Busy (2/3)
   452 00:F8C3: 4A                           LSR     A               ;Shift Error bit into Carry flag (2)
   453 00:F8C4: B0 30                        BCS     IDE_WRITE_ERR   ;If Carry set, IDE error (2/3)
   454                        ;
  Thu Jan 27 2022  6:08                                                                                                    Page 14


   455                        ; Write Block routine integrated into IDE_WRITE_LBA
   456                        ;
   457                        ; - High byte needs to be loaded into the latch before the
   458                        ;   low byte is loaded into the Data Register!
   459                        ;
   460                        IDE_WRITE_BLK                           ;Write a block of data
   461 00:F8C6: 5A                           PHY                     ;Save Y reg
   462 00:F8C7: A0 01                        LDY     #$01            ;Set offset for high byte latch
   463                        ;
   464                        IDE_WRITE_LOOP
   465 00:F8C9: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register
   466 00:F8CC: 29 08                        AND     #%00001000      ;Check for DRQ active
   467 00:F8CE: F0 18                        BEQ     IDE_WR_FIN      ;If not active, exit (below)
   468                        IDE_WR_WBLK
   469 00:F8D0: B1 FB                        LDA     (BIOS_XFERL),Y  ;Get first byte of buffer+1
   470 00:F8D2: 8D 75 FE                     STA     IDE_16_WRITE    ;Place into high byte latch
   471 00:F8D5: B2 FB                        LDA     (BIOS_XFERL)    ;Get first byte of buffer
   472 00:F8D7: 8D 78 FE                     STA     IDE_DATA        ;Write buffer to IDE (writes a word)
   473                        ;
   474                        ; - Buffer index needs to be incremented twice
   475                        ;
   476 00:F8DA: E6 FB                        INC     BIOS_XFERL      ;Increment pointers once
   477 00:F8DC: D0 02                        BNE     IDE_WR_BLK1
   478 00:F8DE: E6 FC                        INC     BIOS_XFERH
   479                        IDE_WR_BLK1
   480 00:F8E0: E6 FB                        INC     BIOS_XFERL      ;Increment pointers again
   481 00:F8E2: D0 E5                        BNE     IDE_WRITE_LOOP
   482 00:F8E4: E6 FC                        INC     BIOS_XFERH
   483 00:F8E6: 80 E1                        BRA     IDE_WRITE_LOOP  ;Loop back for 256 words
   484                        ;
   485                        IDE_WR_FIN
   486                        ; when DRQ ends, 512 bytes have been sent to IDE controller. Controller then sets BUSY,
   487                        ; when finished processing data, controller clears BUSY and generates an interrupt.
   488                        ; So, we test for BUSY first and wait until the block is written.
   489                        ;
   490 00:F8E8: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register (4)
   491 00:F8EB: 30 FB                        BMI     IDE_WR_FIN      ;Loop until BUSY bit is clear (2/3)
   492                        ;
   493 00:F8ED: C6 FD                        DEC     BIOS_XFERC      ;Decrement Block Count to transfer (5)
   494 00:F8EF: D0 D8                        BNE     IDE_WRITE_LOOP  ;If not zero, branch around Match bit reset (2/3)
   495                        ;
   496                        WR_WAIT
   497 00:F8F1: AF FF FD                     BBS2    MATCH,WR_WAIT   ;Wait for Write completed via ISR (5)
   498 00:F8F4: 7A                           PLY                     ;Restore Y reg (3)
   499 00:F8F5: 60                           RTS                     ;Return to caller (6)
   500                        IDE_WRITE_ERR
   501 00:F8F6: 27 FF                        RMB2    MATCH           ;Reset Write LBA bit (no ISR) (5)
   502 00:F8F8: 80 B4                        BRA     IDE_RWV_FIN     ;Branch and finish up
   503                        ;
   504                        IDE_VERIFY_LBA                          ;Verify LBA after write
   505                        ;
   506                        ; This routine requires loading the requested LBA into the appropriate registers and
   507                        ; issuing the VERIFY command 40h. The LBA count supported for the BIOS are bits 0-23,
   508                        ; so bits 24-27 are always set to 0. This provides access to IDE devices up to 8GB.
   509                        ;
   510                        ; It is identical to a Read Block command except no Data is transferred, only verified.
   511                        ; Also, no DRQ is set, but an interrupt is generated after the Verify is completed.
   512                        ;
   513                        ; The registers used are the same for read/write/verify. These are:
   514                        ;
   515                        ;       IDE_COMMAND = function requested (40h = Verify LBA command)
   516                        ;       IDE_DRV_HEAD = (Upper 4 bits) used as:
   517                        ;               bit 7 = 1 per Seagate documentation
  Thu Jan 27 2022  6:08                                                                                                    Page 15


   518                        ;               bit 6 = 1 for LBA mode
   519                        ;               bit 5 = 1 per Seagate documentation
   520                        ;               bit 4 = 0 for Drive 0
   521                        ;       IDE_DRV_HEAD = LBA Address bits 27-24 (lower 4 bits) - not used, always 0000
   522                        ;       IDE_CYL_HIGH = LBA Address bits 23-16
   523                        ;       IDE_CYL_LOW = LBA Address bits 15-8
   524                        ;       IDE_SCT_NUM = LBA Address bits 7-0
   525                        ;       IDE_SCT_CNT = number of blocks to verify
   526                        ;
   527 00:F8FA: 20 25 F9                     JSR     IDE_SET_PARMS   ;Setup required parameters
   528                        ;
   529 00:F8FD: 97 FF                        SMB1    MATCH           ;Set Verify LBA bit
   530 00:F8FF: A9 40                        LDA     #$40            ;Get Verify LBA command
   531 00:F901: 8D 7F FE                     STA     IDE_COMMAND     ;Send command to IDE Controller
   532                        LBA_VF_CMD
   533 00:F904: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register
   534 00:F907: 30 FB                        BMI     LBA_VF_CMD      ;Loop until IDE controller not Busy
   535 00:F909: 4A                           LSR     A               ;Shift Error bit into Carry flag
   536 00:F90A: 90 04                        BCC     VF_FINISH       ;If Carry clear, no error
   537                        ;
   538 00:F90C: 17 FF                        RMB1    MATCH           ;Reset Verify LBA bit (no ISR)
   539 00:F90E: 80 9E                        BRA     IDE_RWV_FIN     ;Branch and finish up
   540                        ;
   541                        VF_FINISH
   542 00:F910: 20 52 F9                     JSR     TST_IDE_RDY     ;Wait for IDE Controller ready
   543                        VF_WAIT
   544 00:F913: 9F FF FD                     BBS1    MATCH,VF_WAIT   ;Wait for Verify to complete via ISR
   545 00:F916: 60                           RTS                     ;Return to caller
   546                        ;
   547                        IDE_SET_ADDRESS                         ;Set Address for LBA (read/write)
   548                        ;
   549                        ; This routine uses the A,Y,X registers to setup the address in memory that a block
   550                        ; will be read to or written from (16-bit address), along with the block count.
   551                        ; The Register usage is as follows:
   552                        ;       A Register = Memory address low byte
   553                        ;       Y Register = Memory address high byte
   554                        ;       X Register = Block count to transfer (device dependent)
   555 00:F917: 85 F5                        STA     LBA_ADDR_LOW    ;Set LBA low byte address (3)
   556 00:F919: 84 F6                        STY     LBA_ADDR_HIGH   ;Set LBA high byte address (3)
   557 00:F91B: 86 F7                        STX     LBA_XFER_CNT    ;Set LBA Block count for xfer (3)
   558 00:F91D: 60                           RTS                     ;Return to caller (6)
   559                        ;
   560                        IDE_SET_LBA                             ;Set LBA block for transfer (read/write)
   561                        ;
   562                        ; This routine sets the variables used to select the starting LBA for transfer.
   563                        ; The Register usage is as follows:
   564                        ;       A Register = LBA Address bits 7-0
   565                        ;       Y Register = LBA Address bits 15-8
   566                        ;       X Register = LBA Address bits 23-16
   567 00:F91E: 85 F8                        STA     LBA_LOW_BYTE    ;Store Address bits 0-7 (3)
   568 00:F920: 84 F9                        STY     LBA_HIGH_BYTE   ;Store Address bits 8-15 (3)
   569 00:F922: 86 FA                        STX     LBA_EXT_BYTE    ;Store Address bits 16-23 (3)
   570 00:F924: 60                           RTS                     ;Return to caller (6)
   571                        ;
   572                        ; This routine sets the LBA number used for all transfers.
   573                        ; - The IDE Controller is checked first to ensure it's ready to receive parameters
   574                        ; - then the requested LBA (stored in Page Zero variables) are loaded into the
   575                        ; - IDE Controller registers, followed by the required Mode parameters.
   576                        ; - Last, the transfer address is setup which points to the location in memory that
   577                        ; - will be used to transfer Data to or from.
   578                        ;
   579                        IDE_SET_PARMS                           ;Set All parameters for LBA transfers
   580                        ;
  Thu Jan 27 2022  6:08                                                                                                    Page 16


   581 00:F925: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register (4)
   582 00:F928: 30 FB                        BMI     IDE_SET_PARMS   ;Loop until BUSY bit is clear (2/3)
   583                        ;
   584                        ;                PHX                     ;Save X register (2)
   585                        ;                LDX     #$04            ;Set Index count for 4 (2)
   586                        ;PARM_XFER_LP
   587                        ;                LDA     LBA_XFER_CNT-1,X        ;Get the parameters (4)
   588                        ;                STA     IDE_SCT_CNT-1,X ;Store to IDE registers (5)
   589                        ;                DEX                     ;Decrement count (2)
   590                        ;                BNE     PARM_XFER_LP    ;Loop back till done (2/3)
   591                        ;                PLX                     ;Restore X register (3)
   592                        ;
   593 00:F92A: A5 FA                        LDA     LBA_EXT_BYTE    ;Set LBA bits 23-16 (3)
   594 00:F92C: 8D 7D FE                     STA     IDE_CYL_HIGH    ;Send to IDE (4)
   595 00:F92F: A5 F9                        LDA     LBA_HIGH_BYTE   ;Set LBA bits 15-8 (3)
   596 00:F931: 8D 7C FE                     STA     IDE_CYL_LOW     ;Send to IDE (4)
   597 00:F934: A5 F8                        LDA     LBA_LOW_BYTE    ;Get LBA bits 7-0 (3)
   598 00:F936: 8D 7B FE                     STA     IDE_SCT_NUM     ;Send to IDE (4)
   599 00:F939: A5 F7                        LDA     LBA_XFER_CNT    ;Get Block count to read (3)
   600 00:F93B: 8D 7A FE                     STA     IDE_SCT_CNT     ;Send to IDE (4)
   601                        ;
   602                        IDE_SET_PARMS2                          ;Set partial parameters (non LBA xfer commands)
   603                        ;
   604 00:F93E: A9 E0                        LDA     #%11100000      ;Set Drive 0, LBA mode, LBA bits 27-24 as 0 (2)
   605 00:F940: 8D 7E FE                     STA     IDE_DRV_HEAD    ;Send to IDE controller (4)
   606                        ;
   607 00:F943: A5 F5                        LDA     LBA_ADDR_LOW    ;Setup buffer address (3)
   608 00:F945: 85 FB                        STA     BIOS_XFERL      ;Store low byte (3)
   609 00:F947: A5 F6                        LDA     LBA_ADDR_HIGH   ;Block Buffer Address (3)
   610 00:F949: 85 FC                        STA     BIOS_XFERH      ;Store high byte (3)
   611 00:F94B: A5 F7                        LDA     LBA_XFER_CNT    ;Get Block count to read (3)
   612 00:F94D: 85 FD                        STA     BIOS_XFERC      ;Set BIOS Block count to Xfer (3)
   613 00:F94F: 64 FE                        STZ     IDE_STATUS_RAM  ;Clear RAM Status Register, ISR updates it (3)
   614 00:F951: 60                           RTS                     ;Return to caller (6)
   615                        ;
   616                        ;Test for IDE Controller Ready
   617                        ; This routine tests that the IDE Controller is ready and can accept a command for execution.
   618                        ; There are two bits in the status to qualify this:
   619                        ; Bit 6 is for Ready and bit 4 is for Seek Complete. Both should be active to qualify the
   620                        ; drive as being ready (per Hitachi Microdrive documentation).
   621                        ; Note: It's also possible that bit 0 might be set, which indicates an error condition.
   622                        ; If an error has occurred, we should test for this as well, and set the carry flag to
   623                        ; ensure proper drive sensing.
   624                        ;
   625                        ;
   626                        TST_IDE_RDY
   627 00:F952: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register (4)
   628 00:F955: C9 51                        CMP     #$51            ;Test for Ready and Error bits on (2)
   629 00:F957: F0 06                        BEQ     TST_IDE_ERR     ;If yes, branch to exit (2/3)
   630 00:F959: C9 50                        CMP     #$50            ;Test for Ready bits on (2)
   631 00:F95B: D0 F5                        BNE     TST_IDE_RDY     ;If not, loop back until ready (2/3)
   632 00:F95D: 18                           CLC                     ;Safety to ensure Carry is not set (2)
   633 00:F95E: 60                           RTS                     ;Return to Caller (6)
   634 00:F95F: 38           TST_IDE_ERR     SEC                     ;Set Carry to indicate Error bit set (2)
   635 00:F960: 60                           RTS                     ;Return to Caller (6)
   636                        ;
   637                        ;Test for IDE Controller Busy
   638                        ; This routine loops on the Busy flag. If the IDE Controller is busy, no other
   639                        ; status register flags are valid and no commands can be sent to the IDE Controller.
   640                        ; Hence, this routine is key to determine if the IDE Controller is available to
   641                        ; accept a command. Bit 7 is the Busy Bit. The 65C02 will set the "n" flag
   642                        ; if Bit 7 is active, else clear it.
   643                        ;
  Thu Jan 27 2022  6:08                                                                                                    Page 17


   644                        TST_IDE_BUSY
   645 00:F961: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get IDE Alternate Status register (4)
   646 00:F964: 30 FB                        BMI     TST_IDE_BUSY    ;Loop until BUSY bit is clear (2/3)
   647 00:F966: 60                           RTS                     ;Return to Caller (6)
   648                        ;
   649                        ;**************************************************************************************************
   650                        ;START of Realtime Clock Routines to access NVRAM                                                 *
   651                        ;**************************************************************************************************
   652                        ;
   653                        ;RTC Routines to Read and Write Non-Volatile RAM - 256 Bytes
   654                        ; To use either routine, the starting memory address needs to be
   655                        ; loaded into the A/Y registers. A reg = low byte, Y reg = high byte
   656                        ;
   657 00:F967: 20 85 F9     RTC_NVRD        JSR     RTC_NVSET       ;Setup for transfer
   658 00:F96A: AD 73 FE     RTC_RD_LOOP     LDA     RTC_RAM_DATA    ;Get NVRAM Data
   659 00:F96D: 91 FB                        STA     (BIOS_XFERL),Y  ;Save into RAM
   660 00:F96F: C8                           INY                     ;Increment Y Index
   661 00:F970: D0 F8                        BNE     RTC_RD_LOOP     ;Loop back reading NVRAM
   662 00:F972: 80 0B                        BRA     CLEAR_BMI       ;Clear Burst Mode, exit
   663                        ;
   664 00:F974: 20 85 F9     RTC_NVWR        JSR     RTC_NVSET       ;Setup for transfer
   665 00:F977: B1 FB        RTC_WR_LOOP     LDA     (BIOS_XFERL),Y  ;Get RAM
   666 00:F979: 8D 73 FE                     STA     RTC_RAM_DATA    ;Write to NVRAM Data
   667 00:F97C: C8                           INY                     ;Increment Y Index
   668 00:F97D: D0 F8                        BNE     RTC_WR_LOOP     ;Loop back writing NVRAM
   669 00:F97F: A9 20        CLEAR_BMI       LDA     #%00100000      ;Get Burst Mode Increment bit
   670 00:F981: 1C 6F FE                     TRB     RTC_CONTROL_B   ;Clear Burst Mode for NVRAM
   671 00:F984: 60                           RTS                     ;Return to caller
   672                        ;
   673 00:F985: 85 FB        RTC_NVSET       STA     BIOS_XFERL      ;Save Low Address location
   674 00:F987: 84 FC                        STY     BIOS_XFERH      ;Save High Address location
   675 00:F989: A9 20                        LDA     #%00100000      ;Get Burst Mode Increment bit
   676 00:F98B: 0C 6F FE                     TSB     RTC_CONTROL_B   ;Set Burst Mode for NVRAM
   677 00:F98E: 9C 70 FE                     STZ     RTC_RAM_ADDR    ;Set NVRAM Address to Zero
   678 00:F991: A0 00                        LDY     #$00            ;Zero Y reg - Index
   679 00:F993: 60                           RTS                     ;Return to caller
   680                        ;
   681                        ;**************************************************************************************************
   682                        ;START OF PANIC ROUTINE
   683                        ;The Panic routine is for debug of system problems, i.e., a crash. The hardware design requires a
   684                        ; debounced NMI trigger button which is manually operated when the system crashes or malfunctions.
   685                        ;
   686                        ;User presses the NMI (panic) button. The NMI vectored routine will perform the following tasks:
   687                        ; 1- Save CPU registers in page zero locations
   688                        ; 2- Reset the MicroDrive and disable interrupts
   689                        ; 3- Clear all Console I/O buffer pointers
   690                        ; 4- Call the ROM routines to init the vectors and config data (page $03)
   691                        ; 5- Call the ROM routines to reset/init the DUART (SC28L92)
   692                        ; 6- Enter the Monitor via the warm start vector
   693                        ;
   694                        ; Note: The additional hardware detection (RTC/IDE) are NOT executed with the Panic routine!
   695                        ; The interrupt vectors are restored without including the additional ISR for the IDE controller.
   696                        ;
   697                        ; Note: no memory is cleared except the required pointers/vectors to restore the system.
   698                        ;
   699 00:F994: 78           NMI_VECTOR      SEI                     ;Disable interrupts
   700 00:F995: 85 D6                        STA     AREG            ;Save A Reg
   701 00:F997: 86 D5                        STX     XREG            ;Save X Reg
   702 00:F999: 84 D4                        STY     YREG            ;Save Y Reg
   703 00:F99B: 68                           PLA                     ;Get Processor Status
   704 00:F99C: 85 D2                        STA     PREG            ;Save in PROCESSOR STATUS preset/result
   705 00:F99E: BA                           TSX                     ;Get Stack pointer
   706 00:F99F: 86 D3                        STX     SREG            ;Save STACK POINTER
  Thu Jan 27 2022  6:08                                                                                                    Page 18


   707 00:F9A1: 68                           PLA                     ;Pull RETURN address from STACK
   708 00:F9A2: 85 D0                        STA     PCL             ;Store Low byte
   709 00:F9A4: 68                           PLA                     ;Pull high byte
   710 00:F9A5: 85 D1                        STA     PCH             ;Store High byte
   711                        ;
   712 00:F9A7: A9 06                        LDA     #%00000110      ;Get mask for MicroDrive Reset/IRQ diable
   713 00:F9A9: 8D 76 FE                     STA     IDE_DEV_CTRL    ;Send to MicroDrive
   714                        ;
   715 00:F9AC: 9C 85 FE                     STZ     UART_IMR        ;Disable ALL interrupts from UART
   716                        ;
   717 00:F9AF: A2 0C                        LDX     #$0C            ;Set count for 12
   718 00:F9B1: 74 D6        PAN_LP1         STZ     ICNT_A-1,X      ;Clear DUART I/O pointers
   719 00:F9B3: CA                           DEX                     ;Decrement index
   720 00:F9B4: D0 FB                        BNE     PAN_LP1         ;Branch back till done
   721                        ;
   722 00:F9B6: 20 9C FF                     JSR     INIT_PG03       ;Xfer default Vectors/HW Config to $0300
   723                        ;
   724 00:F9B9: A9 02                        LDA     #%00000010      ;Get mask for MicroDrive Reset off
   725 00:F9BB: 8D 76 FE                     STA     IDE_DEV_CTRL    ;Send to MicroDrive
   726                        ;
   727 00:F9BE: 20 C4 F9                     JSR     INIT_IO         ;Reset and Init the UART for Console
   728 00:F9C1: 6C 06 03     DO_NMI0         JMP     (NMIRTVEC0)     ;Jump to NMI Return Vector (Monitor Warm Start)
   729                        ;
   730                        ;**************************************************************************************************
   731                        ;Initializing the SC28L92 DUART as a Console.
   732                        ;An anomaly in the W65C02 processor requires a different approach in programming the SC28L92
   733                        ; for proper setup/operation. The SC28L92 uses three Mode Registers which are accessed at the same
   734                        ; register in sequence. There is a command that Resets the Mode Register pointer (to MR0) that is
   735                        ; issued first. Then MR0/1/2 are loaded in sequence. The problem with the W65C02 is a false read of
   736                        ; the register when using indexed addressing (i.e., STA UART_REGISTER,X). This results in the Mode
   737                        ; Register pointer being moved to the next register, so the write to next MRx never happens. While
   738                        ; the indexed list works fine for all other register functions/commands, the loading of the
   739                        ; Mode Registers need to be handled separately.
   740                        ;
   741                        ;NOTE: the W65C02 will function normally "if" a page boundary is crossed as part of the STA
   742                        ; (i.e., STA $FDFF,X) where the value of the X Register is high enough to cross the page boundary.
   743                        ; Programming in this manner would be confusing and require modification if the base I/O address
   744                        ; is changed for a different hardware I/O map.
   745                        ;
   746                        ;There are two routines called to setup the 28L92 DUART:
   747                        ;
   748                        ;The first routine is a RESET of the DUART.
   749                        ; It issues the following sequence of commands:
   750                        ;  1- Reset Break Change Interrupts
   751                        ;  2- Reset Receivers
   752                        ;  3- Reset Transmitters
   753                        ;  4- Reset All errors
   754                        ;
   755                        ;The second routine initializes the 28L92 DUART for operation. It uses two tables of data; one for
   756                        ; the register offset and the other for the register data. The table for register offsets is
   757                        ; maintained in ROM. The table for register data is copied to page $03, making it soft data. If
   758                        ; needed, operating parameters can be altered and the DUART re-initialized via the ROM routine.
   759                        ;
   760                        ; Note: A hardware reset will reset the SC28L92 and the default ROM config will be initialized.
   761                        ; Also note that the Panic routine invoked by a NMI trigger will also reset the DUART to the
   762                        ; default ROM config.
   763                        ;
   764 00:F9C4: 20 F8 F9     INIT_IO         JSR     RESET_28L92     ;Reset of SC28L92 DUART (both channels)
   765 00:F9C7: A9 64                        LDA     #DF_TICKS       ;Get divider for jiffy clock (100x10ms = 1 second)
   766 00:F9C9: 85 E6                        STA     TICKS           ;Preload TICK count
   767                        ;
   768                        ;This routine sets the initial operating mode of the DUART
   769                        ;
  Thu Jan 27 2022  6:08                                                                                                    Page 19


   770 00:F9CB: 78           INIT_28L92      SEI                     ;Disable interrupts
   771                        ;
   772 00:F9CC: A2 0F                        LDX     #INIT_DUART_E-INIT_DUART ;Get the Init byte count
   773 00:F9CE: BD 1F 03     28L92_INT       LDA     LOAD_28L92-1,X  ;Get Data for 28L92 Register
   774 00:F9D1: BC E4 FE                     LDY     INIT_OFFSET-1,X ;Get Offset for 28L92 Register
   775 00:F9D4: 99 80 FE                     STA     SC28L92_BASE,Y  ;Store Data to selected register
   776 00:F9D7: CA                           DEX                     ;Decrement count
   777 00:F9D8: D0 F4                        BNE     28L92_INT       ;Loop back until all registers are loaded
   778                        ;
   779                        ; Mode Registers are NOT reset to MR0 by above INIT_28L92!
   780                        ; The following resets the MR pointers for both channels, then sets the MR registers
   781                        ; for each channel. Note: the MR index is incremented to the next location after the write.
   782                        ; NOTE: These writes can NOT be done via indexed addressing modes!
   783                        ;
   784 00:F9DA: A9 B0                        LDA     #%10110000      ;Get mask for MR0 Reset
   785 00:F9DC: 8D 82 FE                     STA     UART_COMMAND_A  ;Reset Pointer for Port A
   786 00:F9DF: 8D 8A FE                     STA     UART_COMMAND_B  ;Reset Pointer for Port B
   787                        ;
   788 00:F9E2: A2 03                        LDX     #$03            ;Set index for 3 bytes to xfer
   789 00:F9E4: BD 2F 03     MR_LD_LP        LDA     LOAD_28L92+15,X ;Get MR data for Port A
   790 00:F9E7: 8D 80 FE                     STA     UART_MODEREG_A  ;Send to 28L92 Port A
   791 00:F9EA: BD 32 03                     LDA     LOAD_28L92+18,X ;Get MR data for Port B
   792 00:F9ED: 8D 88 FE                     STA     UART_MODEREG_B  ;Send to 28L92 Port B
   793 00:F9F0: CA                           DEX                     ;Decrement index to next data
   794 00:F9F1: D0 F1                        BNE     MR_LD_LP        ;Branch back till done
   795                        ;
   796 00:F9F3: 58                           CLI                     ;Enable interrupts
   797                        ;
   798                        ; Start Counter/Timer
   799                        ;
   800 00:F9F4: AD 8E FE                     LDA     UART_START_CNT  ;Read register to start counter/timer
   801 00:F9F7: 60                           RTS                     ;Return to caller
   802                        ;
   803                        ;This routine does a Reset of the SC28L92
   804                        ;
   805 00:F9F8: A2 04        RESET_28L92     LDX     #UART_RDATAE-UART_RDATA1 ;Get the Reset commands byte count
   806 00:F9FA: BD E0 FE     UART_RES1       LDA     UART_RDATA1-1,X ;Get Reset commands
   807 00:F9FD: 8D 82 FE                     STA     UART_COMMAND_A  ;Send to UART A CR
   808 00:FA00: 8D 8A FE                     STA     UART_COMMAND_B  ;Send to UART B CR
   809 00:FA03: CA                           DEX                     ;Decrement the command list index
   810 00:FA04: D0 F4                        BNE     UART_RES1       ;Loop back until all are sent
   811 00:FA06: 60                           RTS                     ;Return to caller
   812                        ;
   813                        ;**************************************************************************************************
   814                        ;
   815                        ;Core routines that are used to detect and configure additional I/O devices.
   816                        ; The I/O adapter supported by the 4.0x Release of C02BIOS contains two I/O devices:
   817                        ; - A Maxim DS15x1 Realtime Clock
   818                        ; - An IDE Device, i.e., IBM/Hitachi MicroDrive
   819                        ;
   820                        ; The first routine is to detect the DS15x1 RTC. This is done by reading the NVRAM section
   821                        ; and testing for the Signature at the end of NVRAM. Obviously, this is something that needs
   822                        ; to be setup before it can be detected. There is a separate utility that is used to configure
   823                        ; the RTC for Time/Date, NVRAM usage and the two-byte signature. This utility must be run first
   824                        ; to properly configure the RTC. Once completed, the BIOS will detect the RTC and read the
   825                        ; Date and Time to set the BIOS variables accordingly.
   826                        ;
   827                        ; The second routine is to detect the IDE device. This can be a bit tricky...
   828                        ; The first step is to load the status register and check it's contents. If there is no device
   829                        ; attached, the contents will be a "phantom" I/O address, which is $FE.
   830                        ; If this happens, simply bypass any additional testing and setup.
   831                        ; If the contents are other than the "phantom" I/O address, we take additional steps to sense
   832                        ; the IDE Controller, initialize it, check for LBA support and add it's ISR into the chain.
  Thu Jan 27 2022  6:08                                                                                                    Page 20


   833                        ;
   834                        ;**************************************************************************************************
   835                        ;
   836                        ;This routine detects the DS15x1 RTC.
   837                        ; While there's really no standard method to detect the RTC, the NVRAM is initialized
   838                        ; during the configuration for Date, Time, etc. The last two bytes of the NVRAM will
   839                        ; contain a 2-byte signature of "KM", in honor of the author ;-)
   840                        ; If the signature is found, the INIT_RTC routine is called, which will setup the
   841                        ; RTC variables in Page Zero, where the correct Date and Time will be maintained.
   842                        ;
   843                        DETECT_RTC
   844 00:FA07: A2 FE                        LDX     #$FE            ;Load NVRAM Offset
   845 00:FA09: 8E 70 FE                     STX     RTC_RAM_ADDR    ;Set index to start of signature
   846 00:FA0C: AD 73 FE                     LDA     RTC_RAM_DATA    ;Get NVRAM Data
   847 00:FA0F: C9 4B                        CMP     #"K"            ;Check for "K"
   848 00:FA11: D0 0B                        BNE     SET_EPOCH       ;If not found, set EPOCH as default
   849 00:FA13: E8                           INX                     ;Increment Offset (X=$FF)
   850 00:FA14: 8E 70 FE                     STX     RTC_RAM_ADDR    ;Set index to start of signature
   851 00:FA17: AD 73 FE                     LDA     RTC_RAM_DATA    ;Get NVRAM Data
   852 00:FA1A: C9 4D                        CMP     #"M"            ;Check for "M"
   853 00:FA1C: F0 0B                        BEQ     FOUND_RTC       ;If good, go Init RTC and exit
   854                        ;
   855                        ;If RTC not found, preload Date variables as EPOCH time (Thursday, 1st January, 1970)
   856                        ; Note: Time variables default to zero from a cold start.
   857                        ;
   858                        SET_EPOCH
   859 00:FA1E: A2 03                        LDX     #$03            ;Get Index of 3
   860 00:FA20: BD A9 FD     EPOCH_LP        LDA     EPOCH-1,X       ;Get Preload data
   861 00:FA23: 95 E9                        STA     DAY_DATE-1,X    ;Store in RTC variables
   862 00:FA25: CA                           DEX                     ;Decrement Index
   863 00:FA26: D0 F8                        BNE     EPOCH_LP        ;Loop back until done
   864 00:FA28: 60                           RTS                     ;Return, no RTC found
   865                        ;
   866                        FOUND_RTC
   867 00:FA29: E8                           INX                     ;Increment Index ($FF -> $00)
   868 00:FA2A: BD B4 FF     FOUND_RTC_LP    LDA     RTC_MSG,X       ;Get BIOS init msg
   869 00:FA2D: F0 06                        BEQ     INIT_RTC        ;If zero, msg done, go Init RTC
   870 00:FA2F: 20 19 F8                     JSR     CHROUT          ;Send to console
   871 00:FA32: E8                           INX                     ;Increment Index
   872 00:FA33: 80 F5                        BRA     FOUND_RTC_LP    ;Loop back until done
   873                        ;
   874                        ;This routine reads the BCD registers from the DS15x1 RTC, converts BCD to Binary and loads the
   875                        ; BIOS RTC variables. Note that some of the variables are shared to conserve Page Zero space.
   876                        ; Note: Buffer area used for init is also used by C02 Monitor for hex input and code conversion,
   877                        ; but is initialized as needed before usage, so we can clobber it here when configuring the BIOS.
   878                        ;
   879                        ;As there is a period of time required to get the data from the RTC, convert from BCD, then format
   880                        ; into the Page Zero locations used, we need to manage the existing Timer/Counter status to ensure
   881                        ; the best accuracy in time once the routine finishes. In short, the best we can manage accuracy
   882                        ; is within one second, as the RTC internal update of the registers we read are halted.
   883                        ;
   884                        ;To help minimize the timing transfer, we first set the BIOS tick count to it's default value
   885                        ; to ensure that the software RTC values are not updated during loading from the hardware RTC.
   886                        ;
   887                        ; The time to detect and load the current time/date is less than 5000 clock cycles. However, the
   888                        ; overall accuracy can only be within one second. After the RTC values are transferred, the
   889                        ; software RTC tick count will not have reached zero, as the entire timing is less than 1ms to
   890                        ; to read the RTC, convert the BCD data and load the software clock variable in Page Zero. This
   891                        ; results in software RTC timing starting a 1 second countdown from when the RTC is detected.
   892                        ;
   893                        INIT_RTC
   894 00:FA35: A2 64                        LDX     #DF_TICKS       ;Get BIOS default Tick count (2)
   895 00:FA37: 86 E6                        STX     TICKS           ;Reset the Tick count (3)
  Thu Jan 27 2022  6:08                                                                                                    Page 21


   896 00:FA39: A2 00                        LDX     #$00            ;Set X reg to zero for indexing below (2)
   897 00:FA3B: A9 80                        LDA     #%10000000      ;Get TE Bit mask (2)
   898 00:FA3D: 1C 6F FE                     TRB     RTC_CONTROL_B   ;Turn off TE Bit to disable update (6)
   899                        ;
   900                        RTC_LOAD_LOOP
   901 00:FA40: BD 60 FE                     LDA     RTC_SECONDS,X   ;Get Data from RTC (4)
   902 00:FA43: 95 A0                        STA     BUFF_PG0,X      ;Store into RAM (4)
   903 00:FA45: E8                           INX                     ;Increment register count (2)
   904 00:FA46: E0 08                        CPX     #$08            ;Check for all 8 moved (2)
   905 00:FA48: D0 F6                        BNE     RTC_LOAD_LOOP   :Loop back until all registers are read (2/3)
   906                        ;
   907 00:FA4A: A9 80                        LDA     #%10000000      ;Get TE Bit mask (2)
   908 00:FA4C: 0C 6F FE                     TSB     RTC_CONTROL_B   ;Turn on TE Bit to enable update (6)
   909                        ;
   910                        ;Now convert BCD to Binary (X reg = $08)
   911                        ;
   912 00:FA4F: B5 9F        BCD_LOOP        LDA     BUFF_PG0-1,X    ;Get BCD Data from Buffer (4)
   913                        ;
   914 00:FA51: A8                           TAY                     ;Save BCD value (2)
   915 00:FA52: 29 F0                        AND     #$F0            ;Mask for high nibble (2)
   916 00:FA54: 4A                           LSR     A               ;Shift right (/2) (2)
   917 00:FA55: 85 ED                        STA     RTC_TEMP        ;Save in temp (3)
   918 00:FA57: 4A                           LSR     A               ;Shift over (/4) (2)
   919 00:FA58: 4A                           LSR     A               ;Shift over (/8) -Carry is clear (2)
   920 00:FA59: 65 ED                        ADC     RTC_TEMP        ;Add to temp (3)
   921 00:FA5B: 85 ED                        STA     RTC_TEMP        ;Store it back (3)
   922 00:FA5D: 98                           TYA                     ;Get BCD back (2)
   923 00:FA5E: 29 0F                        AND     #$0F            ;Mask for low nibble (2)
   924 00:FA60: 65 ED                        ADC     RTC_TEMP        ;Add temp (upper converted nibble) (3)
   925                        ;
   926 00:FA62: 95 9F                        STA     BUFF_PG0-1,X    ;Save Binary Data back to Buffer (4)
   927 00:FA64: CA                           DEX                     ;Decrement Index (2)
   928 00:FA65: D0 E8                        BNE     BCD_LOOP        ;Loop back until done (2/3)
   929                        ;
   930                        ;Now take the binary data for the RTC, and format it for the BIOS RTC variables:
   931                        ; Seconds, Minutes and Hours are fine as they are, so they simply move over.
   932                        ; The Day (of the week) and the Date (of the Month) are combined into a single variable.
   933                        ; Note: Day (of the week) is variable and decided by the user. In honor of my past, I'm
   934                        ; declaring Saturday as the 1st day of the week, an IBM tradition.
   935                        ; The Month is also kept in the upper 4 bits of the Century variable.
   936                        ; Note: The Century and Year are two BCD digits each. As 4 BCD digits, these need to be
   937                        ; converted to a 16-bit binary integer. Only 12-bits are needed, which frees the upper
   938                        ; 4-bits to be used for the Month.
   939                        ;
   940 00:FA67: A5 A3                        LDA     BUFF_PG0+3      ;Get the Day count (3)
   941 00:FA69: 0A                           ASL     A               ;Shift to upper 3 bits (2)
   942 00:FA6A: 0A                           ASL     A               ; (2)
   943 00:FA6B: 0A                           ASL     A               ; (2)
   944 00:FA6C: 0A                           ASL     A               ; (2)
   945 00:FA6D: 0A                           ASL     A               ; (2)
   946 00:FA6E: 05 A4                        ORA     BUFF_PG0+4      ;OR in the Date variable (3)
   947 00:FA70: 85 A3                        STA     BUFF_PG0+3      ;Save to the Day variable (3)
   948                        ;
   949 00:FA72: A5 A5                        LDA     BUFF_PG0+5      ;Get the Month variable (3)
   950 00:FA74: 0A                           ASL     A               ;Shift to upper 4 bits (2)
   951 00:FA75: 0A                           ASL     A               ; (2)
   952 00:FA76: 0A                           ASL     A               ; (2)
   953 00:FA77: 0A                           ASL     A               ; (2)
   954 00:FA78: 85 A4                        STA     BUFF_PG0+4      ;Save it (lower nibble = 0) (3)
   955                        ;
   956                        ; The easiest way to create the 16-bit Year is to take the high binary digit
   957                        ; and multiply it by 100, then add the low binary digit. We do the multiply
   958                        ; by adding it to the 16-bit variable 100 times ;-)
  Thu Jan 27 2022  6:08                                                                                                    Page 22


   959                        ;
   960 00:FA7A: A2 64                        LDX     #100            ;Get the index count for 100 (2)
   961 00:FA7C: 64 A8                        STZ     BUFF_PG0+8      ;Zero Temp low byte (3)
   962 00:FA7E: 64 A9                        STZ     BUFF_PG0+9      ;Zero Temp high byte (3)
   963                        ;
   964 00:FA80: A5 A7        RTC_ADD         LDA     BUFF_PG0+7      ;Get Year value (3)
   965 00:FA82: 20 A1 FA                     JSR     ADD_16          ;Go add it... (6)
   966 00:FA85: CA                           DEX                     ;Decrement count (2)
   967 00:FA86: D0 F8                        BNE     RTC_ADD         ;Loop back until done (2/3)
   968                        ;
   969 00:FA88: A5 A6                        LDA     BUFF_PG0+6      ;Get Year lower digit (3)
   970 00:FA8A: 20 A1 FA                     JSR     ADD_16          ;Add it into the Temp (6)
   971                        ;
   972 00:FA8D: A5 A8                        LDA     BUFF_PG0+8      ;Get lower byte for year (3)
   973 00:FA8F: 85 A5                        STA     BUFF_PG0+5      ;Save it (3)
   974 00:FA91: A5 A9                        LDA     BUFF_PG0+9      ;Get upper byte for year (3)
   975 00:FA93: 05 A4                        ORA     BUFF_PG0+4      ;OR in Month (upper 4 bits) (3)
   976 00:FA95: 85 A4                        STA     BUFF_PG0+4      ;Save it (3)
   977                        ;
   978                        ; Now transfer the buffer contents to the Page Zero RTC variables
   979                        ;
   980 00:FA97: A2 06                        LDX     #$06            ;Set count for 6 (2)
   981 00:FA99: B5 9F        RTC_XFER        LDA     BUFF_PG0-1,X    ;Get the buffer data (4)
   982 00:FA9B: 95 E6                        STA     SECS-1,X        ;Save to RTC variables (4)
   983 00:FA9D: CA                           DEX                     ;Decrement count (2)
   984 00:FA9E: D0 F9                        BNE     RTC_XFER        ;Loop back till done (2/3)
   985 00:FAA0: 60                           RTS                     ;Return to caller (6)
   986                        ;
   987 00:FAA1: 18           ADD_16          CLC                     ;Clear carry flag (2)
   988 00:FAA2: 65 A8                        ADC     BUFF_PG0+8      ;Add to Temp low byte (3)
   989 00:FAA4: 85 A8                        STA     BUFF_PG0+8      ;And save it (3)
   990 00:FAA6: A5 A9                        LDA     BUFF_PG0+9      ;Get high byte (3)
   991 00:FAA8: 69 00                        ADC     #$00            ;Add carry to Temp high byte (2)
   992 00:FAAA: 85 A9                        STA     BUFF_PG0+9      ;And save it (3)
   993 00:FAAC: 60                           RTS                     ;Return to caller (6)
   994                        ;
   995                        ;**************************************************************************************************
   996                        ;
   997                        ;This routine detects the IDE Port
   998                        ; To detect the IDE controller, it can be a bit tricky. It might take several seconds
   999                        ; from a physical Reset of the IDE Controller before the Busy flag goes off.
  1000                        ; During this time, any commands sent to the IDE controller will fail. As I like to say,
  1001                        ; "timing is everything". After quite a bit of testing, the easy way to detect the IDE
  1002                        ; controller present is to load the IDE_STATUS register. If an IDE Controller is not
  1003                        ; present, the A Reg will show a phantom address of $FE (high order IDE hardware address)
  1004                        ; and any initialization can be bypassed.
  1005                        ;
  1006                        ; If the IDE controller is present, the IDE_STATUS read may be invalid, so it's necessary
  1007                        ; to test the BUSY flag of the status register. Once the IDE Controller is no longer busy,
  1008                        ; the controller can be initialized. This does create an obvious pause in the startup, but
  1009                        ; ensures that the IDE controller can be reliably detected and initialized at boot time.
  1010                        ;
  1011                        ; A change has been made in the IDE_SETUP routine. As the interrupts were disabled on the
  1012                        ; IDE Controller initially, it needs to be re-enabled before the setup is completed. The short
  1013                        ; bit of code that does this is also called by the Reset-Diag function (JMP $FF00).
  1014                        ;
  1015                        DETECT_IDE
  1016 00:FAAD: AD 7F FE                     LDA     IDE_STATUS      ;Get the IDE Status
  1017 00:FAB0: C9 FE                        CMP     #$FE            ;Check for an empty (phantom) address
  1018 00:FAB2: D0 01                        BNE     IDE_INIT        ;If not #$FE, try to Init the IDE controller
  1019 00:FAB4: 60           NO_IDE          RTS                     ;Return to caller, no IDE controller found
  1020                        ;
  1021                        ;Init the IDE controller
  Thu Jan 27 2022  6:08                                                                                                    Page 23


  1022                        ; First, test for the IDE controller ready. If that works, execute the IDE device
  1023                        ; Diagnostics and check for successful completion. If it fails, exit without linking
  1024                        ; the IDE controller into the IRQ chain. Else, link IRQ chain and show message that
  1025                        ; the IDE device is found.
  1026                        ;
  1027                        IDE_INIT
  1028 00:FAB5: 20 61 F9                     JSR     TST_IDE_BUSY    ;Check/wait if IDE is still busy after HW Reset
  1029 00:FAB8: 20 3E FB                     JSR     IDE_DIAG        ;Run the self diagnostic
  1030 00:FABB: C9 50                        CMP     #$50            ;Check for $50 on A reg (drive ready)
  1031 00:FABD: D0 F5                        BNE     NO_IDE          ;If not, no IDE present
  1032 00:FABF: E0 01                        CPX     #$01            ;X Reg will show #$01 if diags successful
  1033 00:FAC1: D0 F1                        BNE     NO_IDE          ;If failed, exit
  1034                        ;
  1035                        ; IDE Controller found and passed initial self diagnostics test.
  1036                        ; Send IDE Found message to terminal
  1037                        ;
  1038 00:FAC3: CA                           DEX                     ;Zero X Reg for index to msg (was #$01)
  1039 00:FAC4: BD C0 FF     IDE_MSG_LP      LDA     IDE_MSG,X       ;Get BIOS init msg
  1040 00:FAC7: F0 06                        BEQ     IDE_SETUP       ;If zero, msg done, go setup IDE
  1041 00:FAC9: 20 19 F8                     JSR     CHROUT          ;Send to console
  1042 00:FACC: E8                           INX                     ;Increment Index
  1043 00:FACD: 80 F5                        BRA     IDE_MSG_LP      ;Loop back until done
  1044                        ;
  1045                        ;IDE Setup
  1046                        ; This will insert the IDE Controller ISR into the Interrupt Handler chain.
  1047                        ;
  1048                        ; First, disable interrupts, capture the current IRQ exit vector address
  1049                        ; and save it to the first Insert Vector. Second, load the IDE ISR routine
  1050                        ; address and store it to the main IRQ exit vector, then re-enable interrupts.
  1051                        ;
  1052                        ; Second, this routine will execute an Identify IDE command to load the Soft
  1053                        ; Config Data for the maximum LBA Count accessible by the current IDE device.
  1054                        ;
  1055                        ; Note: Two routines are below, use only one! They allow a choice to insert
  1056                        ; the IDE ISR before or after the main Interrupt Handler. By default, loading
  1057                        ; is before the main ISR. Despite the high speed of the data transfers, the
  1058                        ; interrupt rate is not that high.
  1059                        ;
  1060 00:FACF: 78           IDE_SETUP       SEI                     ;Disable interrupts
  1061                        ;
  1062                        ; To load the IDE ISR Handler BEFORE the existing DUART ISR Handler:
  1063                        ;
  1064 00:FAD0: AD 04 03                     LDA     IRQVEC0         ;Get low byte of IRQ Exit
  1065 00:FAD3: AC 05 03                     LDY     IRQVEC0+1       ;Get high byte of IRQ Exit
  1066 00:FAD6: 8D 10 03                     STA     VECINSRT0       ;Save low byte of IRQ Exit
  1067 00:FAD9: 8C 11 03                     STY     VECINSRT0+1     ;Save high byte of IRQ Exit
  1068                        ;
  1069 00:FADC: A9 6A                        LDA     #<INTERUPT1     ;Get low byte of IDE ISR
  1070 00:FADE: A0 FB                        LDY     #>INTERUPT1     ;Get high byte of IDE ISR
  1071 00:FAE0: 8D 04 03                     STA     IRQVEC0         ;Save low byte of IRQ Exit
  1072 00:FAE3: 8C 05 03                     STY     IRQVEC0+1       ;Save high byte of IRQ Exit
  1073                        ;
  1074                        ; To load the IDE ISR Handler AFTER the existing DUART ISR Handler:
  1075                        ;
  1076                        ;                LDA     IRQRTVEC0       ;Get low byte of IRQ Exit
  1077                        ;                LDY     IRQRTVEC0+1     ;Get high byte of IRQ Exit
  1078                        ;                STA     VECINSRT0       ;Save low byte of IRQ Exit
  1079                        ;                STY     VECINSRT0+1     ;Save high byte of IRQ Exit
  1080                        ;
  1081                        ;                LDA     #<INTERUPT1     ;Get low byte of IDE ISR
  1082                        ;                LDY     #>INTERUPT1     ;Get high byte of IDE ISR
  1083                        ;                STA     IRQRTVEC0       ;Save low byte of IRQ Exit
  1084                        ;                STY     IRQRTVEC0+1     ;Save high byte of IRQ Exit
  Thu Jan 27 2022  6:08                                                                                                    Page 24


  1085                        ;
  1086 00:FAE6: 58                           CLI                     ;Enable interrupts
  1087 00:FAE7: 20 61 FB                     JSR     IDE_EN_IRQ      ;Enable IDE Controller interrupt
  1088                        ;
  1089                        ; Drop into Identify Drive routine
  1090                        ;
  1091                        IDE_IDENTIFY                            ;Identify Device
  1092                        ;
  1093                        ; This requests a 512-byte block of data that shows capabilities, CHS (not used), LBA Count, etc.
  1094                        ; The format is similar to Read LBA, except no LBA parameter is required. It effectively works as
  1095                        ; a Read Block operation and the data transferred is handled by the ISR for a Read Block.
  1096                        ; NOTE: The Identify Command is coded to load into LBA_BUFFER (address $0600).
  1097                        ;
  1098 00:FAEA: A9 00                        LDA     #<LBA_BUFFER    ;Set Address low byte
  1099 00:FAEC: A0 06                        LDY     #>LBA_BUFFER    ;Set Address high byte
  1100 00:FAEE: A2 01                        LDX     #$01            ;Set Block count to 1
  1101 00:FAF0: 20 17 F9                     JSR     IDE_SET_ADDRESS ;Set Xfer address and block count
  1102                        ;
  1103 00:FAF3: 20 61 F9                     JSR     TST_IDE_BUSY    ;Wait for IDE Controller not busy
  1104 00:FAF6: 20 3E F9                     JSR     IDE_SET_PARMS2  ;Setup required parameters (no LBA parameter)
  1105                        ;
  1106 00:FAF9: A9 EC                        LDA     #$EC            ;Get Identify Command
  1107 00:FAFB: 20 94 F8                     JSR     IDENT_READ      ;Use READ_LBA routine to finish
  1108                        ;
  1109                        ; Identify data loaded in buffer. Now extract LBA count and store to Soft Config Data for usage
  1110                        ; by access routines (Read/Write/Verify). Four bytes are used and the format from the Identify
  1111                        ; Command are Low-order Word / High-order Word, where each word is in Big Endian. We will store
  1112                        ; the LBA count as Little Endian, Low-order Word / High-order Word.
  1113                        ; The offset from the buffer are Words 60-61 (decimal).
  1114                        ;
  1115                        ; A table is used to index the offset of bytes to move into consecutive soft data.
  1116                        ;
  1117 00:FAFE: A2 04                        LDX     #$04            ;Set count for 4 bytes
  1118 00:FB00: BC CB FF     LBA_SIZE        LDY     LBA_OFFSET-1,X  ;Get Offset to LBA count
  1119 00:FB03: B1 F5                        LDA     (LBA_ADDR_LOW),Y        ;Load LBA Data
  1120 00:FB05: 9D 3B 03                     STA     LOAD_IDE-1,X    ;Store to Soft Config Data
  1121 00:FB08: CA                           DEX                     ;Decrement count
  1122 00:FB09: D0 F5                        BNE     LBA_SIZE        ;Loop back until done
  1123                        ;
  1124                        ; Enable Write Cache for Microdrive, performance improvement ;-)
  1125                        IDE_EN_CACHE
  1126 00:FB0B: A9 02                        LDA     #$02            ;Get Enable Write Cache Feature
  1127                        IDE_CACHE_CMD
  1128 00:FB0D: 8D 79 FE                     STA     IDE_FEATURE     ;Send to IDE controller
  1129 00:FB10: A9 E0                        LDA     #%11100000      ;Get Drive 0, LBA. mode, etc.
  1130 00:FB12: 8D 7E FE                     STA     IDE_DRV_HEAD    ;Send to IDE controller
  1131 00:FB15: A9 EF                        LDA     #$EF            ;Get Set Features Command
  1132 00:FB17: 8D 7F FE                     STA     IDE_COMMAND     ;Send Command to set feature
  1133 00:FB1A: 20 52 F9                     JSR     TST_IDE_RDY     ;Test for Drive ready
  1134 00:FB1D: AD 7F FE                     LDA     IDE_STATUS      ;Get Status
  1135 00:FB20: AE 79 FE                     LDX     IDE_ERROR       ;Get Error (if any)
  1136 00:FB23: 60                           RTS                     ;Return to Caller
  1137                        ;
  1138                        ; Disable Write Cache for Microdrive, NO performance improvement;-(
  1139                        IDE_DIS_CACHE
  1140 00:FB24: A9 82                        LDA     #$82            ;Get Disable Write Cache Feature
  1141 00:FB26: 80 E5                        BRA     IDE_CACHE_CMD   ;Finish Command above
  1142                        ;
  1143                        ; Reset IDE Controller and run Diagnostics
  1144                        ; The RECAL routine disables the IRQ function, so the routine to enable the IRQ
  1145                        ; is called, then drops into the get status routine before returning.
  1146                        ;
  1147                        IDE_RESET                               ;Do a Reset of IDE device
  Thu Jan 27 2022  6:08                                                                                                    Page 25


  1148 00:FB28: 20 42 FB                     JSR     IDE_RECAL       ;Call IDE_RESET (set LBA mode)
  1149 00:FB2B: 20 0B FB                     JSR     IDE_EN_CACHE    ;Enable Write Cache
  1150 00:FB2E: 20 52 F9                     JSR     TST_IDE_RDY     ;Wait until Drive ready
  1151 00:FB31: 20 61 FB                     JSR     IDE_EN_IRQ      ;Re-enable IDE Controller interrupt
  1152                        ;
  1153                        ; Drop into Get Status routine after Diagnostics are run
  1154                        ;
  1155                        IDE_GET_STATUS                          ;Get Status/Error registers from the IDE controller
  1156                        ;
  1157                        ; This routine gets the current status of the IDE Controller and can be issued at any time.
  1158                        ; It does not rely on any interrupt capability as it's a simple read of the Status and the
  1159                        ; Error registers from the IDE Controller.
  1160                        ;
  1161                        ; Note: This routine should be called whenever an Error has occurred, as it returns the
  1162                        ; contents of the Error Register in the X Register and the contents of the Status Register
  1163                        ; in the A Register.
  1164                        ;
  1165                        ; Details for the Registers are:
  1166                        ;
  1167                        ; Error Register:
  1168                        ;Bit 7 - CRC Error or Bad Block error
  1169                        ;Bit 6 - Uncorrectable Data Error
  1170                        ;Bit 5 - 0 (not used) MC (used for Removable-Media drives)
  1171                        ;Bit 4 - ID Not Found
  1172                        ;Bit 3 - 0 (not used) MCR (used for Removable-Media drives)
  1173                        ;Bit 2 - Aborted Command error
  1174                        ;Bit 1 - Track Zero not found error
  1175                        ;Bit 0 - Data Address Mark Not Found
  1176                        ;
  1177                        ; Status Register:
  1178                        ;Bit 7 - Busy - IDE Controller is Busy (all other bits invalid)
  1179                        ;Bit 6 - Drive Ready (IDE Controller Ready to accept Commands)
  1180                        ;Bit 5 - Drive Write Fault - Write Fault error has occurred
  1181                        ;Bit 4 - Drive Seek Complete - is active when the drive is not seeking
  1182                        ;Bit 3 - Data Request - bit set when the IDE Controller has Data to transfer (R/W)
  1183                        ;Bit 2 - Correctable Data - bit set when bad data was found and corrected (ECC)
  1184                        ;Bit 1 - Index - bit toggled from 0 to 1 once per disk revolution
  1185                        ;Bit 0 - Error - bit set when previous command ended with some sort of error
  1186                        ;
  1187 00:FB34: 20 61 F9                     JSR     TST_IDE_BUSY    ;Wait for IDE Controller not busy
  1188 00:FB37: AD 7F FE                     LDA     IDE_STATUS      ;Get IDE Status Register
  1189 00:FB3A: AE 79 FE                     LDX     IDE_ERROR       ;Get IDE Error Register
  1190 00:FB3D: 60                           RTS                     ;Return to Caller
  1191                        ;
  1192                        IDE_DIAG                                ;Run internal Diagnostics on the IDE controller
  1193                        ;
  1194                        ; This is a basic self test within the IDE controller.
  1195                        ; This runs some internal tests for the IDE controller and returns with drive ready bits
  1196                        ; active ($50) and the error register as $01 if successful.
  1197                        ; For Diagnostics, the Error Register contains unique codes as follows:
  1198                        ;
  1199                        ;01h - No error Detected
  1200                        ;02h - Formatter device error
  1201                        ;03h - Sector Buffer error
  1202                        ;04h - ECC Circuitry error
  1203                        ;05h - Controller Microprocessor error
  1204                        ;8xH - Device 1 failed (not valid with a single drive system)
  1205                        ;       Note: 80h OR’ed in for the Slave Drive, lower bit definitions are the same!
  1206                        ;
  1207                        ; To send this command, a common routine is used to save ROM space.
  1208                        ;
  1209 00:FB3E: A9 90                        LDA     #$90            ;Get Diagnostic Command
  1210 00:FB40: 80 02                        BRA     IDE_SEND_CMD    ;Branch and send Command to IDE
  Thu Jan 27 2022  6:08                                                                                                    Page 26


  1211                        ;
  1212                        IDE_RECAL                               ;Recalibrate Command
  1213                        ;
  1214                        ;This is the Recalibrate Command ($1x). Upon issue the IDE controller will move the heads to
  1215                        ; Cylinder 0 and read Head 0, Sector 1. If unsuccessful, an error will be posted.
  1216                        ;
  1217 00:FB42: A9 10                        LDA     #$10            ;Get Recalibrate Command
  1218                        ;
  1219                        ; Drop into Send Command routine
  1220                        ;
  1221                        IDE_SEND_CMD                            ;Send a Command to the IDE controller
  1222                        ;
  1223                        ;Accepts a Command code via the A reg and sets up the necessary IDE Controller
  1224                        ; registers to accept it. It also tests to ensure the controller is ready
  1225                        ; to accept the command and get the Status and Error registers on return.
  1226                        ;
  1227                        ; NOTE: this routine turns off the interrupt capability as it is called
  1228                        ; during initial setup, where the interrupt handler has not been setup yet.
  1229                        ; A separate routine is called to enable the interrupt capability.
  1230                        ;
  1231 00:FB44: 78                           SEI                     ;Disable Interrupts
  1232 00:FB45: AA                           TAX                     ;Save Command to X Reg
  1233 00:FB46: 20 52 F9                     JSR     TST_IDE_RDY     ;Wait for IDE to be ready
  1234 00:FB49: A9 0A                        LDA     #%00001010      ;Get Mask to disable IRQ
  1235 00:FB4B: 8D 76 FE                     STA     IDE_DEV_CTRL    ;Send to control register
  1236 00:FB4E: A9 E0                        LDA     #%11100000      ;Get Select Mask (LBA Mode, Drive 0)
  1237 00:FB50: 8D 7E FE                     STA     IDE_DRV_HEAD    ;Select Drive 0
  1238                        ;
  1239 00:FB53: 8E 7F FE                     STX     IDE_COMMAND     ;Send command to IDE
  1240 00:FB56: 20 61 F9                     JSR     TST_IDE_BUSY    ;Wait for drive Busy
  1241                        ;
  1242 00:FB59: AD 7F FE                     LDA     IDE_STATUS      ;Get IDE Status Register
  1243 00:FB5C: AE 79 FE                     LDX     IDE_ERROR       ;Get IDE Error Register
  1244 00:FB5F: 58                           CLI                     ;Enable interrupts
  1245 00:FB60: 60                           RTS                     ;Return to caller
  1246                        ;
  1247                        ; Enable Interrupts on the IDE Controller.
  1248                        ; This needs to be executed during initial setup and anytime the Reset/Diag BIOS function
  1249                        ; is called.
  1250                        ;
  1251                        IDE_EN_IRQ                              ;Enable IDE Controller interrupt
  1252 00:FB61: 20 52 F9                     JSR     TST_IDE_RDY     ;Wait for IDE to be ready
  1253 00:FB64: A9 08                        LDA     #%00001000      ;Get Mask to enable IRQ
  1254 00:FB66: 8D 76 FE                     STA     IDE_DEV_CTRL    ;Send to control register
  1255 00:FB69: 60                           RTS                     ;Return to caller
  1256                        ;
  1257                        ;**************************************************************************************************
  1258                        ;
  1259                        ;Interrupt 1 - This is the ISR which is responsible for servicing the IDE controller.
  1260                        ; The RTC does not require any ISR capabilities as no Alarm functions are being used in the BIOS.
  1261                        ; There are extra inserts which can be used if needed at a later date.
  1262                        ; The only functions that might make sense would be to add the Alarm function at a future date.
  1263                        ; Once the IDE controller BIOS has matured, if there's any room left in the allocated ROM area,
  1264                        ; I'll revisit it.
  1265                        ;
  1266                        ;The ISR for the IDE controller will handle the data transfer for LBA read/write/verify functions
  1267                        ; and handle any error functions. By design, the 16-bit Data Transfer feature is used for:
  1268                        ; Reading / Writing / Verifying of all LBA block data and the IDE Identification data.
  1269                        ;
  1270                        ;The BIOS is using the Alternate Status register to determine if DRQ (Data Request) is active.
  1271                        ; This works as a handshake for 16-bit data transfers without issue. Note that the normal Status
  1272                        ; register resets the interrupt when read, so this is only done once in the ISR per loop.
  1273                        ;
  Thu Jan 27 2022  6:08                                                                                                    Page 27


  1274                        ;Update: This ISR has been moved to the front of the ISR chain, i.e., this ISR routine gets
  1275                        ; serviced first, then jumps to the next ISR, which services the DUART. This makes a noticeable
  1276                        ; improvement in data transfer from the IDE controller. Note that overhead for this routine will
  1277                        ; add 33 clock cycles if it just exits (IDE controller did not generate an interrupt).
  1278                        ;
  1279                        ;To check if an interrupt has been generated by the IDE controller, the Alternate Status register
  1280                        ; can be read. This contains the same information as the standard Status register but will NOT
  1281                        ; reset the interrupt on the IDE controller. By reading the Alternate Status register first, we
  1282                        ; can first determine what the status of the IDE controller is and take action if required.
  1283                        ; Note that not all bit settings imply an interrupt was generated. Specifically, looking at the
  1284                        ; bit definitions below, Bits 6 and 4 are set when the IDE is ready, hence a normal condition
  1285                        ; where nothing requires any attention. Also, a Busy condition can imply the IDE controller is
  1286                        ; working on a command but may not have generated an interrupt yet. If The Busy bit (7) is set,
  1287                        ; then all other bits are invalid per Seagate documentation, so we trigger on that first.
  1288                        ;
  1289                        ;One annoying feature for IDE is "when" interrupts are generated. For any Read operation, once
  1290                        ; the command has been accepted, data is placed into the IDE buffer, followed by generating
  1291                        ; an interrupt to the system. Once this is done, the system will read the data. By accessing the
  1292                        ; Status register, the interrupt will be reset. This is normal operation. For a write operation,
  1293                        ; The command is sent, then DRQ goes active, which requires the data be sent to the IDE Device.
  1294                        ; Once the data is written, an interrupt is generated after it's completed.
  1295                        ; As a result, there's little function of having an ISR for servicing the write function.
  1296                        ; As interrupts are enabled for the IDE Controller, all generated interrupts must be handled.
  1297                        ;
  1298                        ; Status Register bits as defined as follows:
  1299                        ;       - Bit 7 = Busy (a Command has been accepted)
  1300                        ;       - Bit 6 = Ready (IDE controller is ready to accept a command)
  1301                        ;       - Bit 5 = Write Fault (A write command failed against the media)
  1302                        ;       - Bit 4 = DSC (is set when a Seek is completed)
  1303                        ;       - Bit 3 = Data Request (set when there is data to transfer, read or write)
  1304                        ;       - Bit 2 = Correction (set when a recoverable data error was corrected)
  1305                        ;       - Bit 1 = 0 (not used)
  1306                        ;       - Bit 0 = Error (set when the previous command had an unrecoverable error)
  1307                        ;
  1308                        ;       NOTE: 25 clock cycles to here if DUART ISR is second!
  1309                        ;
  1310                        INTERUPT1                               ;Interrupt 1 (IDE)
  1311 00:FB6A: AD 76 FE                     LDA     IDE_ALT_STATUS  ;Get Alternate Status Register (4)
  1312 00:FB6D: 30 3C                        BMI     REGEXT01        ;If Busy bit active, just exit (2/3)
  1313                        ;
  1314                        ; - Check for Data Request (DRQ), as the Read LBA operation is the main function
  1315                        ;   of the ISR, which will handle the data transfer from the IDE controller to store the
  1316                        ;   data into memory. This ISR will handle single and multiple block transfers.
  1317                        ;
  1318 00:FB6F: AD 7F FE                     LDA     IDE_STATUS      ;Get Status (resets IRQ) (4)
  1319 00:FB72: 29 08                        AND     #%00001000      ;Check for DRQ (2)
  1320 00:FB74: D0 08                        BNE     IDE_READ_BLK    ;Branch if active (2/3)
  1321                        ;
  1322                        ; - If no DRQ is sensed, the other possibilities are:
  1323                        ; 1- A LBA Write has occurred and the interrupt was generated after the transfer.
  1324                        ; 2- A Verify operation has occurred and the interrupt was generated after the verify.
  1325                        ; So we check for these two options and branch accordingly.
  1326                        ;
  1327 00:FB76: AF FF 35                     BBS2    MATCH,IDE_WRIT_BLK      ;If Bit 2 set, Write operation (5)
  1328 00:FB79: 9F FF 3A                     BBS1    MATCH,IDE_VRFY_BLK      ;If Bit 1 set, Verify operation (5)
  1329 00:FB7C: 80 2D                        BRA     REGEXT01                ;Exit ISR handler (3)
  1330                        ;
  1331                        IDE_READ_BLK                            ;IDE Read a Block of data
  1332                        ;
  1333                        ;Note: Arrival here means that the DRQ bit in the status register is active.
  1334                        ; This implies that:
  1335                        ;  1- A LBA Block Read is in progress. If so, the data transfer will be handled below.
  1336                        ;     This also handles multiple LBA Reads and manages the pointers and such. It also
  Thu Jan 27 2022  6:08                                                                                                    Page 28


  1337                        ;     clears the LBA Read bit in the MATCH Flag when completed.
  1338                        ;
  1339                        ;  2- A LBA Block Write with multilpe blocks is in progress. If so, the actual data
  1340                        ;     transfer is handled via the IDE WRITE Block routine. An interrupt is generated
  1341                        ;     at the end of each LBA transfer, so that is monitored here and the LBA Write bit
  1342                        ;     in the MATCH Flag is cleared when there are no more blocks to transfer.
  1343                        ;
  1344                        ;Also realize that this ISR will be executed every time the DUART generates an interrupt.
  1345                        ; This will happen every 10ms for the Jiffy-Clock timer and for character transmit and receive.
  1346                        ;
  1347 00:FB7E: 3F FF 2A                     BBR3    MATCH,REGEXT01  ;If Bit 3 clear, IDE Write (5)
  1348                        ;
  1349 00:FB81: AD 76 FE     LBA_XFER        LDA     IDE_ALT_STATUS  ;Get Status (clears IRQ) (4)
  1350 00:FB84: 29 08                        AND     #%00001000      ;Check for DRQ (2)
  1351 00:FB86: F0 18                        BEQ     IDE_RD_DONE     ;If not active, done, exit (2/3)
  1352                        ;
  1353                        IDE_RD_RBLK
  1354 00:FB88: AD 78 FE                     LDA     IDE_DATA        ;Read low byte (high byte in latch) (4)
  1355 00:FB8B: 92 FB                        STA     (BIOS_XFERL)    ;Store low byte (5)
  1356 00:FB8D: E6 FB                        INC     BIOS_XFERL      ;Increment pointers (5)
  1357 00:FB8F: D0 02                        BNE     IDE_RD_BLK1     ; (2/3)
  1358 00:FB91: E6 FC                        INC     BIOS_XFERH      ; (5)
  1359                        IDE_RD_BLK1
  1360 00:FB93: AD 74 FE                     LDA     IDE_16_READ     ;Read high byte from latch (4)
  1361 00:FB96: 92 FB                        STA     (BIOS_XFERL)    ;Store high byte (5)
  1362 00:FB98: E6 FB                        INC     BIOS_XFERL      ;Increment pointers (5)
  1363 00:FB9A: D0 E5                        BNE     LBA_XFER        ;Loop back to Xfer, saves 3 clock cycles (2/3)
  1364 00:FB9C: E6 FC                        INC     BIOS_XFERH      ; (5)
  1365                        IDE_RD_BLK2
  1366 00:FB9E: 80 E1                        BRA     LBA_XFER        ;Loop back till no more DRQs (3)
  1367                        ;
  1368 00:FBA0: C6 FD        IDE_RD_DONE     DEC     BIOS_XFERC      ;Decrement Block Count to transfer (5)
  1369 00:FBA2: D0 02                        BNE     IDE_ALL_DONE    ;Branch around Flag Reset until all blocks moved (2/3)
  1370 00:FBA4: 37 FF                        RMB3    MATCH           ;Clear Read Block flag (5)
  1371                        ;
  1372 00:FBA6: AD 76 FE     IDE_ALL_DONE    LDA     IDE_ALT_STATUS  ;Get Alternate Status Register (4)
  1373 00:FBA9: 85 FE                        STA     IDE_STATUS_RAM  ;Save it to RAM location (3)
  1374 00:FBAB: 6C 10 03     REGEXT01        JMP     (VECINSRT0)     ;Exit ISR handler (6)
  1375                        ;
  1376                        IDE_WRIT_BLK                            ;IDE Write a Block of data
  1377 00:FBAE: A5 FD                        LDA     BIOS_XFERC      ;Check Block Count to transfer (3)
  1378 00:FBB0: D0 F4                        BNE     IDE_ALL_DONE    ;Branch to exit if more blocks need to be moved (2/3)
  1379 00:FBB2: 27 FF                        RMB2    MATCH           ;Clear Write Block flag (5)
  1380 00:FBB4: 80 F0                        BRA     IDE_ALL_DONE    ;Branch and finish ISR (3)
  1381                        ;
  1382                        IDE_VRFY_BLK                            ;IDE Verify a Block of data
  1383 00:FBB6: 17 FF                        RMB1    MATCH           ;Clear Verify Block flag (5)
  1384 00:FBB8: 80 EC                        BRA     IDE_ALL_DONE    ;Branch and finish ISR (3)
  1385                        ;
  1386                        ;**************************************************************************************************
  1387                        ;
  1388                        ;BRK/IRQ Interrupt service routines
  1389                        ;The pre-process routine located in page $FF soft-vectors to INTERUPT0/BRKINSTR0 below
  1390                        ;       These are the routines that handle BRK and IRQ functions
  1391                        ;       The BRK handler saves CPU details for register display
  1392                        ;       - A Monitor can provide a disassembly of the last executed instruction
  1393                        ;       - A Received Break is also handled here (ExtraPutty/Windows or Serial/OSX)
  1394                        ;
  1395                        ; SC28L92 handler
  1396                        ;       The 28L92 IRQ routine handles Transmit, Receive, Timer and Received-Break interrupts
  1397                        ;       - Transmit and Receive each have a 128 byte circular FIFO buffer in memory per channel
  1398                        ;       - Xmit IRQ is controlled (On/Off) by the handler and the CHROUT(2) routine
  1399                        ;
  Thu Jan 27 2022  6:08                                                                                                    Page 29


  1400                        ; The 28L92 Timer resolution is 10ms and used as a Jiffy Clock for RTC, delays and benchmarking
  1401                        ;
  1402                        ;**************************************************************************************************
  1403                        ;
  1404                        ;BIOS routines to handle interrupt-driven I/O for the SC28L92
  1405                        ;NOTE: IP0 Pin is used for RTS, which is automatically handled in the chip. As a result,
  1406                        ; the upper 2 bits of the ISR are not used in the handler. The Lower 5 bits are used, but
  1407                        ; the lower two are used to determine when to disable transmit after the buffer is empty.
  1408                        ;
  1409                        ;The DUART_ISR bits are defined as follows:
  1410                        
  1411                        ; Bit7          ;Input Change Interrupt
  1412                        ; Bit6          ;Change Break B Interrupt
  1413                        ; Bit5          ;RxRDY B Interrupt
  1414                        ; Bit4          ;TxRDY B Interrupt
  1415                        ; Bit3          ;Counter Ready Interrupt
  1416                        ; Bit2          ;Change Break A Interrupt
  1417                        ; Bit1          ;RxRDY A Interrupt
  1418                        ; Bit0          ;TxRDY A Interrupt
  1419                        ;
  1420                        ;**************************************************************************************************
  1421                        ;
  1422                        ; SC8L92 uses all bits in the Status Register!
  1423                        ; - for Receive Buffer full, we set a bit in the SC28L92 Misc. Register, one for each Port.
  1424                        ; Note that the Misc. Register in the SC28L92 is a free byte for storing the flags, as it's
  1425                        ; not used when the DUART is configured in Intel mode! Freebie Register for us to use ;-)
  1426                        ;
  1427                        ;ISR Routines for SC28L92 Port B
  1428                        ;
  1429 00:FBBA: A4 DD        UARTB_RCV0      LDY     ICNT_B          ;Get input buffer count (3)
  1430 00:FBBC: 30 41                        BMI     BUFFUL_B        ;Check against limit ($80), branch if full (2/3)
  1431                        ;
  1432 00:FBBE: AD 89 FE     UARTB_RCVLP     LDA     UART_STATUS_B   ;Get Status Register (4)
  1433 00:FBC1: 89 01                        BIT     #%00000001      ;Check RxRDY active (2)
  1434 00:FBC3: F0 10                        BEQ     UARTB_CXMT      ;If RxRDY not set, FIFO is empty, check Xmit (2/3)
  1435                        
  1436 00:FBC5: AD 8B FE                     LDA     UART_RECEIVE_B  ;Else, get data from 28L92 (4)
  1437 00:FBC8: A4 DF                        LDY     ITAIL_B         ;Get the tail pointer to buffer (3)
  1438 00:FBCA: 99 00 04                     STA     IBUF_B,Y        ;Store into buffer (5)
  1439 00:FBCD: E6 DF                        INC     ITAIL_B         ;Increment tail pointer (5)
  1440 00:FBCF: 77 DF                        RMB7    ITAIL_B         ;Strip off bit 7, 128 bytes only (5)
  1441 00:FBD1: E6 DD                        INC     ICNT_B          ;increment data count (5)
  1442 00:FBD3: 10 E9                        BPL     UARTB_RCVLP     ;If input buffer not full, check for more FIFO data (2/3)
  1443                        ;
  1444 00:FBD5: AD 85 FE     UARTB_CXMT      LDA     UART_ISR        ;Get 28L92 ISR Reg (4)
  1445 00:FBD8: 89 10                        BIT     #%00010000      ;Check for Xmit B active (2)
  1446 00:FBDA: F0 20                        BEQ     REGEXT_B        ;Exit if inactive (2/3)
  1447                        ;
  1448                        ; To take advantage of the onboard FIFO, we test the TxRDY bit in the Status Register.
  1449                        ; If the bit is set, then there is more room in the FIFO. The ISR routine here will
  1450                        ; attempt to fill the FIFO from the Output Buffer. This saves processing time in the
  1451                        ; ISR itself.
  1452                        ;
  1453 00:FBDC: A5 E0        UARTB_XMT0      LDA     OCNT_B          ;Get output buffer count, any data to xmit? (3)
  1454 00:FBDE: F0 17                        BEQ     NODATA_B        ;If zero, no data left, turn off xmit (2/3)
  1455                        ;
  1456 00:FBE0: AD 89 FE     UARTB_XMTLP     LDA     UART_STATUS_B   ;Get Status Register (4)
  1457 00:FBE3: 89 04                        BIT     #%00000100      ;Check TxRDY active (2)
  1458 00:FBE5: F0 15                        BEQ     REGEXT_B        ;If TxRDY not set, FIFO is full, exit ISR (2/3)
  1459                        ;
  1460 00:FBE7: A4 E1                        LDY     OHEAD_B         ;Get the head pointer to buffer (3)
  1461 00:FBE9: B9 80 04                     LDA     OBUF_B,Y        ;Get the next data (5)
  1462 00:FBEC: 8D 8B FE                     STA     UART_TRANSMIT_B ;Send the data to 28L92 (4)
  Thu Jan 27 2022  6:08                                                                                                    Page 30


  1463 00:FBEF: E6 E1                        INC     OHEAD_B         ;Increment head pointer (5)
  1464 00:FBF1: 77 E1                        RMB7    OHEAD_B         ;Strip off bit 7, 128 bytes only (5)
  1465 00:FBF3: C6 E0                        DEC     OCNT_B          ;Decrement counter (5)
  1466 00:FBF5: D0 E9                        BNE     UARTB_XMTLP     ;If more data, loop back to send it (2/3)
  1467                        ;
  1468                        ;No more buffer data to send, check SC28L92 TxEMT and disable transmit if empty.
  1469                        ; Note: If the TxEMT bit is set, then the FIFO is empty and all data has been sent.
  1470                        ;
  1471 00:FBF7: A0 08        NODATA_B        LDY     #%00001000      ;Else, get mask for xmit off (2)
  1472 00:FBF9: 8C 8A FE                     STY     UART_COMMAND_B  ;Turn off xmit (4)
  1473 00:FBFC: 6C 0A 03     REGEXT_B        JMP     (IRQRTVEC0)     ;Return to Exit/ROM IRQ handler (6)
  1474                        ;
  1475 00:FBFF: A0 10        BUFFUL_B        LDY     #%00010000      ;Get Mask for Buffer full (2)
  1476 00:FC01: 8C 8C FE                     STY     UART_MISC       ;Save into 28L92 Misc. Register (4)
  1477 00:FC04: 80 F6                        BRA     REGEXT_B        ;Exit IRQ handler (3)
  1478                        ;
  1479                        ;ISR Routines for SC28L92 Port A
  1480                        ;
  1481                        ; The Receive Buffer is checked first to ensure there is open space in the buffer.
  1482                        ; By loadng the input count, bit7 will be set if it is full, which will set the "N"
  1483                        ; flag in the CPU status register. If this is the case, we exit to BUFFUL_A and set
  1484                        ; a bit the SC28L92 Misc. Register. If the buffer has space, we continue.
  1485                        ; 
  1486                        ; To take advantage of the onboard FIFO, we test the RxRDY bit in the Status Register.
  1487                        ; If the bit is set, the FIFO has data and the routine moves data from the FIFO into
  1488                        ; the Receive buffer. We loop back and contnue moving data from the FIFO to the buffer
  1489                        ; until the RxRDY bit is cleared (FIFO empty). If the FIFO is empty, we branch and
  1490                        ; check for a pending Transmit interrupt, just to save some ISR time.
  1491                        ;
  1492                        ; NOTE: the receiver is configured to use the Watchdog function. This will generate a
  1493                        ; receiver interrupt within 64 bit times once data is received (and the FIFO has not
  1494                        ; reached it's configured fill level). This provides the required operation for use
  1495                        ; as a console, as single character commands are common and would not fill the FIFO,
  1496                        ; which generates an interrupt based on the configured FIFO fill level.
  1497                        ;
  1498 00:FC06: A4 D7        UARTA_RCV       LDY     ICNT_A          ;Get input buffer count (3)
  1499 00:FC08: 30 41                        BMI     BUFFUL_A        ;Check against limit ($80), branch if full (2/3)
  1500                        ;
  1501 00:FC0A: AD 81 FE     UARTA_RCVLP     LDA     UART_STATUS_A   ;Get Status Register (4)
  1502 00:FC0D: 89 01                        BIT     #%00000001      ;Check RxRDY active (2)
  1503 00:FC0F: F0 10                        BEQ     UARTA_CXMT      ;If RxRDY not set, FIFO is empty, check Xmit (2/3)
  1504                        
  1505 00:FC11: AD 83 FE                     LDA     UART_RECEIVE_A  ;Else, get data from 28L92 (4)
  1506 00:FC14: A4 D9                        LDY     ITAIL_A         ;Get the tail pointer to buffer (3)
  1507 00:FC16: 99 00 02                     STA     IBUF_A,Y        ;Store into buffer (5)
  1508 00:FC19: E6 D9                        INC     ITAIL_A         ;Increment tail pointer (5)
  1509 00:FC1B: 77 D9                        RMB7    ITAIL_A         ;Strip off bit 7, 128 bytes only (5)
  1510 00:FC1D: E6 D7                        INC     ICNT_A          ;Increment input bufffer count (5)
  1511 00:FC1F: 10 E9                        BPL     UARTA_RCVLP     ;If input buffer not full, check for more FIFO data (2/3)
  1512                        ;
  1513 00:FC21: AD 85 FE     UARTA_CXMT      LDA     UART_ISR        ;Get 28L92 ISR Reg (4)
  1514 00:FC24: 89 01                        BIT     #%00000001      ;Check for Xmit A active (2)
  1515 00:FC26: F0 20                        BEQ     REGEXT_A        ;Exit if inactive, else drop into Xmit code (2/3)
  1516                        ;
  1517                        ;To take advantage of the onboard FIFO, we test the TxRDY bit in the Status Register.
  1518                        ; If the bit is set, then there is more room in the FIFO. The ISR routine here will
  1519                        ; attempt to fill the FIFO from the Output Buffer. This saves processing time in the
  1520                        ; ISR itself.
  1521                        ;
  1522 00:FC28: A5 DA        UARTA_XMT       LDA     OCNT_A          ;Get output buffer count, any data to xmit? (3)
  1523 00:FC2A: F0 17                        BEQ     NODATA_A        ;If zero, no data left, turn off xmit (2/3)
  1524                        ;
  1525 00:FC2C: AD 81 FE     UARTA_XMTLP     LDA     UART_STATUS_A   ;Get Status Register (4)
  Thu Jan 27 2022  6:08                                                                                                    Page 31


  1526 00:FC2F: 89 04                        BIT     #%00000100      ;Check TxRDY active (2)
  1527 00:FC31: F0 15                        BEQ     REGEXT_A        ;If TxRDY not set, FIFO is full, exit ISR (2/3)
  1528                        ;
  1529 00:FC33: A4 DB                        LDY     OHEAD_A         ;Get the head pointer to buffer (3)
  1530 00:FC35: B9 80 02                     LDA     OBUF_A,Y        ;Get the next data (5)
  1531 00:FC38: 8D 83 FE                     STA     UART_TRANSMIT_A ;Send the data to 28L92 (4)
  1532 00:FC3B: E6 DB                        INC     OHEAD_A         ;Increment head pointer (5)
  1533 00:FC3D: 77 DB                        RMB7    OHEAD_A         ;Strip off bit 7, 128 bytes only (5)
  1534 00:FC3F: C6 DA                        DEC     OCNT_A          ;Decrement output buffer count (5)
  1535 00:FC41: D0 E9                        BNE     UARTA_XMTLP     ;If more data, loop back to send it (2/3)
  1536                        ;
  1537                        ;No more buffer data to send, check SC28L92 TxEMT and disable transmit if empty.
  1538                        ; Note: If the TxEMT bit is set, then the FIFO is empty and all data has been sent.
  1539                        ;
  1540 00:FC43: A0 08        NODATA_A        LDY     #%00001000      ;Else, get mask for xmit off (2)
  1541 00:FC45: 8C 82 FE                     STY     UART_COMMAND_A  ;Turn off xmit (4)
  1542 00:FC48: 6C 0A 03     REGEXT_A        JMP     (IRQRTVEC0)     ;Return to Exit/ROM IRQ handler (6)
  1543                        ;
  1544 00:FC4B: A0 01        BUFFUL_A        LDY     #%00000001      ;Get Mask for Buffer full (2)
  1545 00:FC4D: 8C 8C FE                     STY     UART_MISC       ;Save into 28L92 Misc. Register (4)
  1546 00:FC50: 80 F6                        BRA     REGEXT_A        ;Exit IRQ handler (3)
  1547                        ;
  1548                        ;IRQ Vector defaults to here, which is the Start of Interrupt handler.
  1549                        ; NOTE: 25 clock cycles to get to this routine
  1550                        ; NOTE: If this ISR is after the IDE ISR, it will take 33 additional clock cycles
  1551                        ;
  1552                        INTERUPT0                               ;Interrupt 0 to handle the SC28L92 DUART
  1553 00:FC52: AD 85 FE                     LDA     UART_ISR        ;Get the UART Interrupt Status Register (4)
  1554 00:FC55: F0 1E                        BEQ     REGEXT0         ;If no bits are set, exit handler (2/3)
  1555                        ;
  1556 00:FC57: 89 04                        BIT     #%00000100      ;Test for Break on A (2)
  1557 00:FC59: D0 1D                        BNE     UARTA_BRK       ;If yes, Reset the DUART receiver (2/3)
  1558                        ;
  1559 00:FC5B: 89 02                        BIT     #%00000010      ;Test for RHR A having data (2)
  1560 00:FC5D: D0 A7                        BNE     UARTA_RCV       ;If yes, put the data in the buffer (2/3)
  1561                        ;
  1562 00:FC5F: 89 01                        BIT     #%00000001      ;Test for THR A ready to receive data (2)
  1563 00:FC61: D0 C5                        BNE     UARTA_XMT       ;If yes, get data from the buffer (2/3)
  1564                        ;
  1565 00:FC63: 89 40                        BIT     #%01000000      ;Test for Break on B (2)
  1566 00:FC65: D0 14                        BNE     UARTB_BRK       ;If yes, Reset the DUART receiver (2/3)
  1567                        ;
  1568 00:FC67: 89 20                        BIT     #%00100000      ;Test for RHR B having data (2)
  1569 00:FC69: D0 13                        BNE     UARTB_RCV       ;If yes, put the data in the buffer (2/3)
  1570                        ;
  1571 00:FC6B: 89 10                        BIT     #%00010000      ;Test for THR B ready to receive data (2)
  1572 00:FC6D: D0 12                        BNE     UARTB_XMT       ;If yes, get data from the buffer (2/3)
  1573                        ;
  1574 00:FC6F: 89 08                        BIT     #%00001000      ;Test for Counter ready (RTC) (2)
  1575 00:FC71: D0 11                        BNE     UART_RTC        ;If yes, go increment RTC variables (2/3)
  1576                        ;
  1577                        ; if none of the above bits caused the IRQ, the only bit left is the change input port.
  1578                        ; just save it in the temp IRT register in page zero and exit.
  1579                        ;
  1580 00:FC73: 85 E5                        STA     UART_IRT        ;Save the 28L92 ISR for later use (3)
  1581 00:FC75: 6C 0A 03     REGEXT0         JMP     (IRQRTVEC0)     ;Return to Exit/ROM IRQ handler (6)
  1582                        ;
  1583 00:FC78: 4C 3A FD     UARTA_BRK       JMP     UARTA_BRK0      ;Gotta JUMP to the routine (3)
  1584 00:FC7B: 4C 4C FD     UARTB_BRK       JMP     UARTB_BRK0      ;Gotta JUMP to the routine (3)
  1585                        ;
  1586 00:FC7E: 4C BA FB     UARTB_RCV       JMP     UARTB_RCV0      ;Gotta JUMP to the routine (3)
  1587 00:FC81: 4C DC FB     UARTB_XMT       JMP     UARTB_XMT0      ;Gotta JUMP to the routine (3)
  1588                        ;
  Thu Jan 27 2022  6:08                                                                                                    Page 32


  1589                        ;NOTE: Stop timer cmd resets the interrupt flag, counter continues to generate interrupts.
  1590                        ; NOTE: 35 clock cycles to here from INTERUPT0 - 65 in total
  1591                        ;
  1592 00:FC84: AD 8F FE     UART_RTC        LDA     UART_STOP_CNT   ;Get Command mask for stop timer (4)
  1593                        ;
  1594                        ; Check the MATCH flag bit7 to see if a Delay is active. If yes, decrement the MSDELAY
  1595                        ; variable once each pass until it is zero, then clear the MATCH flag bit7
  1596                        ;
  1597 00:FC87: 7F FF 06                     BBR7    MATCH,SKIP_DLY  ;Skip Delay if bit7 is clear (5)
  1598 00:FC8A: C6 EE                        DEC     MSDELAY         ;Decrement Millisecond delay variable (5)
  1599 00:FC8C: D0 02                        BNE     SKIP_DLY        ;If not zero, skip (2/3)
  1600 00:FC8E: 77 FF                        RMB7    MATCH           ;Else clear MATCH flag (5)
  1601                        ;
  1602                        ; Check the MATCH flag bit6 to see if Benchmarking is active. If yes, increment the
  1603                        ; variables once each pass until the MATCH flag bit6 is inactive.
  1604                        ;
  1605 00:FC90: 6F FF 10     SKIP_DLY        BBR6    MATCH,SKIP_CNT  ;Skip Count if bit6 bit is clear (5)
  1606 00:FC93: E6 F2                        INC     MS10_CNT        ;Else, increment 10ms count (5)
  1607 00:FC95: A5 F2                        LDA     MS10_CNT        ;Load current value (3)
  1608 00:FC97: C9 64                        CMP     #100            ;Compare for 1 second elapsed time (2)
  1609 00:FC99: 90 08                        BCC     SKIP_CNT        ;If not, skip to RTC update (2/3)
  1610 00:FC9B: 64 F2                        STZ     MS10_CNT        ;Else, zero 10ms count (3)
  1611 00:FC9D: E6 F3                        INC     SECL_CNT        ;Increment low byte elapsed seconds (5)
  1612 00:FC9F: D0 02                        BNE     SKIP_CNT        ;If no overflow, skip to RTC update (2/3)
  1613 00:FCA1: E6 F4                        INC     SECH_CNT        ;Else, increment high byte elapsed seconds (5)
  1614                        ;
  1615 00:FCA3: C6 E6        SKIP_CNT        DEC     TICKS           ;Decrement RTC tick count (5)
  1616 00:FCA5: D0 CE                        BNE     REGEXT0         ;Exit if not zero (2/3)
  1617 00:FCA7: A9 64                        LDA     #DF_TICKS       ;Get default tick count (2)
  1618 00:FCA9: 85 E6                        STA     TICKS           ;Reset tick count (3)
  1619                        ;
  1620 00:FCAB: E6 E7                        INC     SECS            ;Increment seconds (5)
  1621 00:FCAD: A5 E7                        LDA     SECS            ;Load it to A reg (3)
  1622 00:FCAF: C9 3C                        CMP     #60             ;Check for 60 seconds (2)
  1623 00:FCB1: 90 C2                        BCC     REGEXT0         ;If not, exit (2/3)
  1624 00:FCB3: 64 E7                        STZ     SECS            ;Else, reset seconds, inc Minutes (3)
  1625                        ;
  1626 00:FCB5: E6 E8                        INC     MINS            ;Increment Minutes (5)
  1627 00:FCB7: A5 E8                        LDA     MINS            ;Load it to A reg (3)
  1628 00:FCB9: C9 3C                        CMP     #60             ;Check for 60 minutes (2)
  1629 00:FCBB: 90 B8                        BCC     REGEXT0         ;If not, exit (2/3)
  1630 00:FCBD: 64 E8                        STZ     MINS            ;Else, reset Minutes, inc Hours (3)
  1631                        ;
  1632 00:FCBF: E6 E9                        INC     HOURS           ;Increment Hours (5)
  1633 00:FCC1: A5 E9                        LDA     HOURS           ;Load it to A reg (3)
  1634 00:FCC3: C9 18                        CMP     #24             ;Check for 24 hours (2)
  1635 00:FCC5: 90 AE                        BCC     REGEXT0         ;If not, exit (2/3)
  1636 00:FCC7: 64 E9                        STZ     HOURS           ;Else, reset hours, inc Days (3)
  1637                        ;
  1638                        ;This is the tricky part ;-)
  1639                        ; One variable holds the Day of the week and the Date of the Month!
  1640                        ; First, update the Day of the Week, which is the upper 3 bits of the variable
  1641                        ; Valid days are 1 to 7. Mask off the upper 3 bits, and add #%00100000 to it,
  1642                        ; if the result is zero, it was #%11100000, so start over by making the Day
  1643                        ; #%00100000, then save it to RTC_TEMP variable.
  1644                        ;
  1645                        ;Once that's done, load the variable again, mask off the Date and increase by
  1646                        ; one, then check against days of the month, update as required and check for
  1647                        ; Leap year and February 29th stuff. When all updated, OR in the Day from the
  1648                        ; RTC_TEMP variable and finish updating the DAY_DATE variable.
  1649                        ;
  1650 00:FCC9: A5 EA                        LDA     DAY_DATE        ;Get Day and Date variable (3)
  1651 00:FCCB: 29 E0                        AND     #%11100000      ;Mask off for Day of Week (1-7) (2)
  Thu Jan 27 2022  6:08                                                                                                    Page 33


  1652 00:FCCD: 18                           CLC                     ;Clear carry for add (2)
  1653 00:FCCE: 69 20                        ADC     #%00100000      ;Add effective "1" to Day of week (2)
  1654 00:FCD0: 18                           CLC                     ;Clear carry to avoid extra day add (2)
  1655 00:FCD1: D0 02                        BNE     NO_DAY_ADD      ;If non-zero, don't reset to "1" (2/3)
  1656 00:FCD3: A9 20                        LDA     #%00100000      ;Else, reset Day to "1" (2)
  1657                        NO_DAY_ADD
  1658 00:FCD5: 85 ED                        STA     RTC_TEMP        ;Store the updated Day into temp (3)
  1659                        ;
  1660                        ;Get the Month and Year variable, move the upper 4-bits down to get the
  1661                        ; current Month. Xfer it the X reg, then get the Date, increment by one
  1662                        ; and check against the number of days in that month.
  1663                        ;
  1664 00:FCD7: A5 EB                        LDA     MONTH_CENTURY   ;Get Month and Year variable (3)
  1665 00:FCD9: 4A                           LSR     A               ;Shift Month to lower 4 bits (2)
  1666 00:FCDA: 4A                           LSR     A               ; (2)
  1667 00:FCDB: 4A                           LSR     A               ; (2)
  1668 00:FCDC: 4A                           LSR     A               ; (2)
  1669 00:FCDD: AA                           TAX                     ;Move to X reg (2)
  1670 00:FCDE: A5 EA                        LDA     DAY_DATE        ;Get Day and Date variable (3)
  1671 00:FCE0: 29 1F                        AND     #%00011111      ;Mask off for Date of Month (1-31) (2)
  1672 00:FCE2: 1A                           INC     A               ;Increment by one (2)
  1673 00:FCE3: DD F3 FE                     CMP     MAX_DATE-1,X    ;Check for Max Day per Month+1 (4)
  1674 00:FCE6: B0 06                        BCS     MONTH_ADD       ;Branch if we need to update the Month (2/3)
  1675 00:FCE8: 05 ED        DO_29           ORA     RTC_TEMP        ;Else OR in updated Date to updated Day (3)
  1676 00:FCEA: 85 EA                        STA     DAY_DATE        ;Update Day and Date variable (3)
  1677 00:FCEC: 80 49                        BRA     REGEXT00        ;Then exit IRQ Handler (3)
  1678                        ;
  1679 00:FCEE: E0 02        MONTH_ADD       CPX     #$02            ;Check for Month = February (2)
  1680 00:FCF0: D0 0F                        BNE     MONTH_INC       ;If not, increment Month (2/3)
  1681 00:FCF2: A5 EC                        LDA     YEAR            ;Else, Get current year low byte (3)
  1682 00:FCF4: 29 03                        AND     #%00000011      ;Mask off lower 2 bits (2)
  1683 00:FCF6: D0 09                        BNE     MONTH_INC       ;If not a Leap Year, continue on (2/3)
  1684 00:FCF8: A5 EA                        LDA     DAY_DATE        ;Get Day and Date variable (3)
  1685 00:FCFA: 29 1F                        AND     #%00011111      :Mask off Date (2)
  1686 00:FCFC: 1A                           INC     A               ;Increment by one (2)
  1687 00:FCFD: C9 1E                        CMP     #30             ;Check for 29th+1 Day for Leap Year (2)
  1688 00:FCFF: 90 E7                        BCC     DO_29           ;Save Date as 29th and exit IRQ handler (2/3)
  1689                        ;
  1690 00:FD01: A5 ED        MONTH_INC       LDA     RTC_TEMP        ;Get updated Day (Date is effective zero) (3)
  1691 00:FD03: 09 01                        ORA     #%00000001      ;OR in the 1st Day of the Month (2)
  1692 00:FD05: 85 EA                        STA     DAY_DATE        ;Save updated Day and Date of the Month (3)
  1693                        ;
  1694 00:FD07: A5 EB                        LDA     MONTH_CENTURY   ;Get Month and Year variable (3)
  1695 00:FD09: 18                           CLC                     ;Clear Carry for add (2)
  1696 00:FD0A: 69 10                        ADC     #$10            ;Add "1" to Month (upper 4 bits) (2)
  1697 00:FD0C: 85 ED                        STA     RTC_TEMP        ;Save it to work temp (3)
  1698 00:FD0E: 29 F0                        AND     #%11110000      ;Mask off Century (lower 4 bits) (2)
  1699 00:FD10: C9 D0                        CMP     #$D0            ;Check for "13" (December + 1) (2)
  1700 00:FD12: B0 06                        BCS     YEAR_ADD        ;If 13 go add to YEAR (2/3)
  1701 00:FD14: A5 ED                        LDA     RTC_TEMP        ;Else, Get updated Month and Century (3)
  1702 00:FD16: 85 EB                        STA     MONTH_CENTURY   ;Save it (3)
  1703 00:FD18: 80 1D                        BRA     REGEXT00        ;Exit IRQ Handler (3)
  1704                        ;
  1705 00:FD1A: A5 EB        YEAR_ADD        LDA     MONTH_CENTURY   ;Get Month and Century (3)
  1706 00:FD1C: 29 0F                        AND     #%00001111      ;Mask off old month (2)
  1707 00:FD1E: 09 10                        ORA     #%00010000      ;OR in $10 for January (2)
  1708 00:FD20: 85 EB                        STA     MONTH_CENTURY   ;Save updated Month and existing upper 4 bits (3)
  1709 00:FD22: E6 EC                        INC     YEAR            ;Increment Year low byte (0-255) (5)
  1710 00:FD24: D0 11                        BNE     REGEXT00        ;If no rollover, exit ISR (2/3)
  1711 00:FD26: A5 EB                        LDA     MONTH_CENTURY   ;Get Month and Year variable (3)
  1712 00:FD28: AA                           TAX                     ;Save to X reg (2)
  1713 00:FD29: 29 F0                        AND     #%11110000      ;Mask off upper 4-bits for year (2)
  1714 00:FD2B: 85 ED                        STA     RTC_TEMP        ;Save it in the temp area (3)
  Thu Jan 27 2022  6:08                                                                                                    Page 34


  1715 00:FD2D: 8A                           TXA                     ;Get the Month and Year back (2)
  1716 00:FD2E: 29 0F                        AND     #%00001111      ;Mask off the month (2)
  1717 00:FD30: 18                           CLC                     ;Clear carry for add (2)
  1718 00:FD31: 69 01                        ADC     #$01            ;Add 1 to upper 4 bits (2)
  1719 00:FD33: 05 ED                        ORA     RTC_TEMP        ;OR in the Month (3)
  1720 00:FD35: 85 EB                        STA     MONTH_CENTURY   ;Update Month and Century variable (3)
  1721 00:FD37: 6C 0A 03     REGEXT00        JMP     (IRQRTVEC0)     ;If no rollover, then exit IRQ handler (6)
  1722                        ;
  1723                        ;Received Break handler for Port A
  1724 00:FD3A: AD 81 FE     UARTA_BRK0      LDA     UART_STATUS_A   ;Get DUART Status Register (4)
  1725 00:FD3D: 30 2B                        BMI     BREAKEY_A       ;If bit 7 set, received Break was detected (2/3)
  1726                        ;
  1727                        ; If a received Break was not the cause, we should reset the DUART Port as the cause
  1728                        ; could have been a receiver error, i.e., parity or framing
  1729                        ;
  1730 00:FD3F: A2 05                        LDX     #UART_RDATAE-UART_RDATA ;Get index count (2)
  1731 00:FD41: BD DF FE     UARTA_RST1      LDA     UART_RDATA-1,X  ;Get Reset commands (4)
  1732 00:FD44: 8D 82 FE                     STA     UART_COMMAND_A  ;Send to DUART CR (3)
  1733 00:FD47: CA                           DEX                     ;Decrement the command list (2)
  1734 00:FD48: D0 F7                        BNE     UARTA_RST1      ;Loop back until all are sent (2/3)
  1735 00:FD4A: 80 EB                        BRA     REGEXT00        ;Exit (3)
  1736                        ;
  1737                        ;Received Break handler for Port B
  1738 00:FD4C: AD 89 FE     UARTB_BRK0      LDA     UART_STATUS_B   ;Get DUART Status Register (4)
  1739 00:FD4F: 30 0D                        BMI     BREAKEY_B       ;If bit 7 set, received Break was detected (2/3)
  1740                        ;
  1741                        ; If a received Break was not the cause, we should reset the DUART Port as the cause
  1742                        ; could have been a receiver error, i.e., parity or framing
  1743                        ;
  1744 00:FD51: A2 05                        LDX     #UART_RDATAE-UART_RDATA ;Get index count (2)
  1745 00:FD53: BD DF FE     UARTB_RST1      LDA     UART_RDATA-1,X  ;Get Reset commands (4)
  1746 00:FD56: 8D 8A FE                     STA     UART_COMMAND_B  ;Send to DUART CR (3)
  1747 00:FD59: CA                           DEX                     ;Decrement the command list (2)
  1748 00:FD5A: D0 F7                        BNE     UARTB_RST1      ;Loop back until all are sent (2/3)
  1749 00:FD5C: 80 D9                        BRA     REGEXT00        ;Exit (3)
  1750                        ;
  1751                        ; A received Break was the cause. Just reset the receiver and return.
  1752                        ;
  1753 00:FD5E: A9 40        BREAKEY_B       LDA     #%01000000      ;Get Reset Received Break command (2)
  1754 00:FD60: 8D 8A FE                     STA     UART_COMMAND_B  ;Send to DUART to reset (4)
  1755 00:FD63: A9 50                        LDA     #%01010000      ;Get Reset Break Interrupt command (2)
  1756 00:FD65: 8D 8A FE                     STA     UART_COMMAND_B  ;Send to DUART to reset (4)
  1757 00:FD68: 80 CD                        BRA     REGEXT00        ;Exit (3)
  1758                        ;
  1759                        ; A received Break was the cause. Reset the receiver and process the BRK routine.
  1760                        ;
  1761 00:FD6A: A9 40        BREAKEY_A       LDA     #%01000000      ;Get Reset Received Break command (2)
  1762 00:FD6C: 8D 82 FE                     STA     UART_COMMAND_A  ;Send to DUART to reset (4)
  1763 00:FD6F: A9 50                        LDA     #%01010000      ;Get Reset Break Interrupt command (2)
  1764 00:FD71: 8D 82 FE                     STA     UART_COMMAND_A  ;Send to DUART to reset (4)
  1765                        ;
  1766 00:FD74: 58           BREAKEY         CLI                     ;Enable IRQ (2)
  1767                        ;
  1768                        ; BRK Vector defaults to here
  1769                        ;
  1770 00:FD75: 7A           BRKINSTR0       PLY                     ;Restore Y Reg (4)
  1771 00:FD76: FA                           PLX                     ;Restore X Reg (4)
  1772 00:FD77: 68                           PLA                     ;Restore A Reg (4)
  1773 00:FD78: 85 D6                        STA     AREG            ;Save A Reg (3)
  1774 00:FD7A: 86 D5                        STX     XREG            ;Save X Reg (3)
  1775 00:FD7C: 84 D4                        STY     YREG            ;Save Y Reg (3)
  1776 00:FD7E: 68                           PLA                     ;Get Processor Status (4)
  1777 00:FD7F: 85 D2                        STA     PREG            ;Save in PROCESSOR STATUS preset/result (3)
  Thu Jan 27 2022  6:08                                                                                                    Page 35


  1778 00:FD81: BA                           TSX                     ;Xfer STACK pointer to X Reg (2)
  1779 00:FD82: 86 D3                        STX     SREG            ;Save STACK pointer (3)
  1780                        ;
  1781 00:FD84: FA                           PLX                     ;Pull Low RETURN address from STACK then save it (4)
  1782 00:FD85: 86 D0                        STX     PCL             ;Store program counter Low byte (3)
  1783 00:FD87: 86 B0                        STX     INDEXL          ;Seed Indexl for DIS_LINE (3)
  1784 00:FD89: 7A                           PLY                     ;Pull High RETURN address from STACK then save it (4)
  1785 00:FD8A: 84 D1                        STY     PCH             ;Store program counter High byte (3)
  1786 00:FD8C: 84 B1                        STY     INDEXH          ;Seed Indexh for DIS_LINE (3)
  1787 00:FD8E: 4F D2 0C                     BBR4    PREG,DO_NULL    ;Check for BRK bit set (5)
  1788                        ;
  1789                        ; The following three subroutines are contained in the base C02 Monitor code. These calls
  1790                        ; do a register display and disassembles the line of code that caused the BRK to occur
  1791                        ;
  1792 00:FD91: 20 21 E0                     JSR     M_PRSTAT1       ;Display CPU status (6)
  1793 00:FD94: 20 2A E0                     JSR     M_DECINDEX      ;Decrement Index to BRK ID Byte (6)
  1794 00:FD97: 20 2A E0                     JSR     M_DECINDEX      ;Decrement Index to BRK instruction (6)
  1795 00:FD9A: 20 24 E0                     JSR     M_DIS_LINE      ;Disassemble BRK instruction (6)
  1796                        ;
  1797                        ; Note: This routine only clears Port A, as it is used for the Console
  1798                        ;
  1799 00:FD9D: A9 00        DO_NULL         LDA     #$00            ;Clear all Processor Status Register bits (2)
  1800 00:FD9F: 48                           PHA                     ;Push it to Stack (3)
  1801 00:FDA0: 28                           PLP                     ;Pull it to Processor Status (4)
  1802 00:FDA1: 64 D9                        STZ     ITAIL_A         ;Clear input buffer pointers (3)
  1803 00:FDA3: 64 D8                        STZ     IHEAD_A         ; (3)
  1804 00:FDA5: 64 D7                        STZ     ICNT_A          ; (3)
  1805 00:FDA7: 6C 08 03                     JMP     (BRKRTVEC0)     ;Done BRK service process, re-enter monitor (6)
  1806                        ;
  1807                        ;**************************************************************************************************
  1808                        ;
  1809                        ; EPOCH time (Unix) starts on Thursday, 1st January, 1970.
  1810                        ; If no RTC is detected, preload the EPOCH Date as a start.
  1811                        ; Note: No time of day is preloaded, time is 00:00:00 after a cold start.
  1812                        ;
  1813 00:FDAA: C1           EPOCH           .DB     %11000001       ;Day 6 / Date 1
  1814 00:FDAB: 17                           .DB     %00010111       ;Month 1  High byte (nibble) of 1970
  1815 00:FDAC: B2                           .DB     %10110010       ;Low byte of 1970 ($B2)
  1816                        ;
  1817                        ;END OF BIOS CODE for Pages $F8 through $FD
  1818                        ;**************************************************************************************************
  1819                                .ORG    $FE00   ;Reserved for I/O space - do NOT put code here
  1820                        ;There are 5- I/O Selects, each is 32-bytes wide.
  1821                        ; I/O-0 = $FE00-$FE1F  Available on BUS expansion connector
  1822                        ; I/O-1 = $FE20-$FE3F  Available on BUS expansion connector
  1823                        ; I/O-2 = $FE40-$FE5F  Available on BUS expansion connector
  1824                        ; I/O-3 = $FE60-$FE7F  Available on BUS expansion connector - Used for RTC-IDE Adapter!
  1825                        ; I/O-4 = $FE80-$FE9F  SC28L92 DUART resides here (only 16 bytes used)
  1826                        ;
  1827                        ; NOTE: The above hardware selects may well change with C02 Pocket SBC 3!
  1828                        ;**************************************************************************************************
  1829                                .ORG    $FEA0   ;Reserved space for Soft Vector and I/O initialization data
  1830                        ;START OF BIOS DEFAULT VECTOR DATA AND HARDWARE CONFIGURATION DATA
  1831                        ;
  1832                        ;There are 96 bytes of ROM space remaining on page $FE from $FEA0 - $FEFF
  1833                        ; 64 bytes of this are copied to page $03 and used for soft vectors/hardware soft configuration.
  1834                        ; 32 bytes are for vectors and 32 bytes are for hardware config. The last 32 bytes are only held
  1835                        ; in ROM and are used for hardware configuration that should not be changed.
  1836                        ;
  1837                        ;The default location for the NMI/BRK/IRQ Vector data is at $0300. They are defined at the top of
  1838                        ; the source file. There are 8 defined vectors and 8 vector inserts, all are free for base config.
  1839                        ;
  1840                        ;The default location for the hardware configuration data is at $0320. It is a freeform table which
  Thu Jan 27 2022  6:08                                                                                                    Page 36


  1841                        ; is copied from ROM to page $03. The allocated size for the hardware config table is 32 bytes.
  1842                        ;
  1843                        VEC_TABLE      ;Vector table data for default ROM handlers
  1844                        ;
  1845 00:FEA0: 94 F9                        .DW     NMI_VECTOR      ;NMI Location in ROM
  1846 00:FEA2: 75 FD                        .DW     BRKINSTR0       ;BRK Location in ROM
  1847 00:FEA4: 52 FC                        .DW     INTERUPT0       ;IRQ Location in ROM
  1848                        ;
  1849 00:FEA6: 03 E0                        .DW     M_WARM_MON      ;NMI return handler in ROM
  1850 00:FEA8: 03 E0                        .DW     M_WARM_MON      ;BRK return handler in ROM
  1851 00:FEAA: 98 FF                        .DW     IRQ_EXIT0       ;IRQ return handler in ROM
  1852                        ;
  1853 00:FEAC: 00 E0                        .DW     M_COLD_MON      ;Monitor Cold start
  1854 00:FEAE: 03 E0                        .DW     M_WARM_MON      ;Monitor Warm start
  1855                        ;
  1856                        ;Vector Inserts (total of 8)
  1857                        ; These can be used as required. Note that the IDE init routine will use Insert 0 if a valid
  1858                        ; IDE controller is found and successfully initialized.
  1859                        ; Also, the NMI/BRK/IRQ and the Monitor routines are vectored, so these can also be extended,
  1860                        ; if needed, by using reserved vector locations.
  1861                        ;
  1862 00:FEB0: FF FF                        .DW     $FFFF           ;Insert 0 Location (used if IDE is found)
  1863 00:FEB2: FF FF                        .DW     $FFFF           ;Insert 1 Location
  1864 00:FEB4: FF FF                        .DW     $FFFF           ;Insert 2 Location
  1865 00:FEB6: FF FF                        .DW     $FFFF           ;Insert 3 Location
  1866 00:FEB8: FF FF                        .DW     $FFFF           ;Insert 4 Location
  1867 00:FEBA: FF FF                        .DW     $FFFF           ;Insert 5 Location
  1868 00:FEBC: FF FF                        .DW     $FFFF           ;Insert 6 Location
  1869 00:FEBE: FF FF                        .DW     $FFFF           ;Insert 7 Location
  1870                        ;
  1871                        ;Configuration Data - The following tables contains the default data used for:
  1872                        ; - Reset of the SC28L92 (RESET_28L92 routine)
  1873                        ; - Init of the SC28L92 (INIT_28L92 routine)
  1874                        ; - Basic details for register definitions are below, consult SC28L92 DataSheet
  1875                        ; - Note: Output Port bits OP0/OP1 must be set for RTS to work on Ports A and B
  1876                        ;
  1877                        ;Mode Register 0 definition
  1878                        ; Bit7          ;Rx Watchdog Control
  1879                        ; Bit6          ;RX-Int(2) Select
  1880                        ; Bit5/4        ;Tx-Int fill level
  1881                        ; Bit3          ;FIFO size
  1882                        ; Bit2          ;Baud Rate Extended II
  1883                        ; Bit1          ;Test 2 (don't use)
  1884                        ; Bit0          ;Baud Rate Extended I
  1885                        ;
  1886                        ;Mode Register 1 definition
  1887                        ; Bit7          ;RxRTS Control - 1 = Yes
  1888                        ; Bit6          ;RX-Int(1) Select
  1889                        ; Bit5          ;Error Mode - 0 = Character
  1890                        ; Bit4/3        ;Parity Mode - 10 = No Parity
  1891                        ; Bit2          ;Parity Type - 0 = Even (doesn't matter)
  1892                        ; Bit1/0        ;Bits Per Character - 11 = 8
  1893                        ;
  1894                        ;Mode Register 2 Definition
  1895                        ; Bit7/6        ;Channel Mode   - 00 = Normal
  1896                        ; Bit5          ;TxRTS Control - 0 = Yes
  1897                        ; Bit4          ;TxCTS Enable - 1 = Yes
  1898                        ; Bit3-0        ;Stop Bits - 0111 = 1 Stop Bit
  1899                        ;
  1900                        ;Baud Rate Clock Definition (Extended Mode I)
  1901                        ; Upper 4 bits = Receive Baud Rate
  1902                        ; Lower 4 bits = Transmit Baud Rate
  1903                        ; for 115.2K setting is %11001100
  Thu Jan 27 2022  6:08                                                                                                    Page 37


  1904                        ; Also set ACR Bit7 = 1 for extended rates (115.2K)
  1905                        ;
  1906                        ;Command Register Definition
  1907                        ; Bit7-4        ;Special commands
  1908                        ; Bit3          ;Disable Transmit
  1909                        ; Bit2          ;Enable Transmit
  1910                        ; Bit1          ;Disable Receive
  1911                        ; Bit0          ;Enable Receive
  1912                        ;
  1913                        ;Aux Control Register Definition
  1914                        ; Bit7          ;BRG Set Select - 1 = Extended
  1915                        ; Bit6-5-4      ;Counter/Timer operating mode 110 = Counter mode from XTAL
  1916                        ; Bit3-2-1-0    ;Enable IP3-2-1-0 Change Of State (COS) IRQ
  1917                        ;
  1918                        ;Interrupt Mask Register Definition
  1919                        ; Bit7          ;Input Change Interrupt 1 = On
  1920                        ; Bit6          ;Change Break B Interrupt 1 = On
  1921                        ; Bit5          ;RxRDY B Interrupt 1 = On
  1922                        ; Bit4          ;TxRDY B Interrupt 1 = On
  1923                        ; Bit3          ;Counter Ready Interrupt 1 = On
  1924                        ; Bit2          ;Change Break A Interrupt 1 = On
  1925                        ; Bit1          ;RxRDY A Interrupt 1 = On
  1926                        ; Bit0          ;TxRDY A Interrupt 1 = On
  1927                        ;
  1928                        CFG_TABLE       ;Configuration table for hardware devices
  1929                        ;
  1930                        ;Data commands are sent in reverse order from list. This list is the default initialization for
  1931                        ; the DUART as configured for use as a Console connected to either ExtraPutty(WIN) or Serial(OSX)
  1932                        ; The data here is copied to page $03 and is used to configure the DUART during boot up. The soft
  1933                        ; data can be changed and the core INIT_28L92 routine can be called to reconfigure the DUART.
  1934                        ; NOTE: the register offset data is not kept in soft config memory as the initialization
  1935                        ; sequence should not be changed!
  1936                        ;
  1937                        ; Both serial ports are configured at startup!
  1938                        ; - Port A is used as the console.
  1939                        ; - Port B is in idle mode.
  1940                        ;
  1941                        INIT_DUART       ;Start of DUART Initialization Data
  1942 00:FEC0: 03                           .DB     %00000011       ;Enable OP0/1 for RTS control Port A/B
  1943 00:FEC1: 0A                           .DB     %00001010       ;Disable Receiver/Disable Transmitter B
  1944 00:FEC2: 09                           .DB     %00001001       ;Enable Receiver/Disable Transmitter A
  1945 00:FEC3: 0F                           .DB     %00001111       ;Interrupt Mask Register setup
  1946 00:FEC4: E0                           .DB     %11100000       ;Aux Register setup for Counter/Timer
  1947 00:FEC5: 48                           .DB     %01001000       ;Counter/Timer Upper Preset
  1948 00:FEC6: 00                           .DB     %00000000       ;Counter/Timer Lower Preset
  1949 00:FEC7: CC                           .DB     %11001100       ;Baud Rate clock for Rcv/Xmt - 115.2K B
  1950 00:FEC8: CC                           .DB     %11001100       ;Baud Rate clock for Rcv/Xmt - 115.2K A
  1951 00:FEC9: 30                           .DB     %00110000       ;Reset Transmitter B
  1952 00:FECA: 20                           .DB     %00100000       ;Reset Receiver B
  1953 00:FECB: 30                           .DB     %00110000       ;Reset Transmitter A
  1954 00:FECC: 20                           .DB     %00100000       ;Reset Receiver A
  1955 00:FECD: 00                           .DB     %00000000       ;Interrupt Mask Register setup
  1956 00:FECE: F0                           .DB     %11110000       ;Command Register A - disable Power Down
  1957                        INIT_DUART_E    ;End of DUART Initialization Data
  1958                        ;
  1959 00:FECF: FF                           .DB     $FF             ;Spare byte for offset to MR data
  1960                        ;
  1961                        ;Mode Register Data is defined separately. Using the loop routine above to send this data to
  1962                        ; the DUART does not work properly. See the description of the problem using Indexed addressing
  1963                        ; to load the DUART registers above. This data is also kept in soft config memory in page $03.
  1964                        ; Note that this data is also in reverse order for loading into MRs!
  1965                        ;
  1966 00:FED0: 17           MR2_DAT_A       .DB     %00010111       ;Mode Register 2 data
  Thu Jan 27 2022  6:08                                                                                                    Page 38


  1967 00:FED1: D3           MR1_DAT_A       .DB     %11010011       ;Mode Register 1 Data
  1968 00:FED2: F9           MR0_DAT_A       .DB     %11111001       ;Mode Register 0 Data
  1969                        ;
  1970 00:FED3: 17           MR2_DAT_B       .DB     %00010111       ;Mode Register 2 data
  1971 00:FED4: D3           MR1_DAT_B       .DB     %11010011       ;Mode Register 1 Data
  1972 00:FED5: C1           MR0_DAT_B       .DB     %11000001       ;Mode Register 0 Data
  1973                        ;
  1974                        ;Reserved for additional I/O devices (10 bytes free)
  1975                        ;
  1976 00:FED6: FF FF FF FF                  .DB     $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
       00:FEDA: FF FF FF FF 
       00:FEDE: FF FF 
  1977                        ;
  1978                        ;Reset DUART Data is listed here. The sequence and commands do not require changes for any reason.
  1979                        ; These are maintained in ROM only. A total of 32 bytes are available for hard configuration data.
  1980                        ; These are the register offsets and Reset data for the DUART
  1981                        ;
  1982                        UART_RDATA      ;DUART Reset Data for Received Break (ExtraPutty/Serial Break)
  1983 00:FEE0: 01                           .DB     %00000001       ;Enable Receiver
  1984                        ;
  1985                        UART_RDATA1     ;Smaller list for entry level Reset (RESET_28L92)
  1986 00:FEE1: 40                           .DB     %01000000       ;Reset All Errors
  1987 00:FEE2: 30                           .DB     %00110000       ;Reset Transmitter
  1988 00:FEE3: 20                           .DB     %00100000       ;Reset Receiver
  1989 00:FEE4: 50                           .DB     %01010000       ;Reset Break Change Interrupt
  1990                        UART_RDATAE     ;End of DUART Reset Data
  1991                        ;
  1992                        INIT_OFFSET     ;Start of DUART Initialization Register Offsets
  1993 00:FEE5: 0E                           .DB     $0E             ;Set Output Port bits
  1994 00:FEE6: 0A                           .DB     $0A             ;Command Register B
  1995 00:FEE7: 02                           .DB     $02             ;Command Register A
  1996 00:FEE8: 05                           .DB     $05             ;Interrupt Mask Register
  1997 00:FEE9: 04                           .DB     $04             ;Aux Command Register
  1998 00:FEEA: 06                           .DB     $06             ;Counter Preset Upper
  1999 00:FEEB: 07                           .DB     $07             ;Counter Preset Lower
  2000 00:FEEC: 09                           .DB     $09             ;Baud Clock Register B
  2001 00:FEED: 01                           .DB     $01             ;Baud Clock Register A
  2002 00:FEEE: 0A                           .DB     $0A             ;Command Register Port B
  2003 00:FEEF: 0A                           .DB     $0A             ;Command Register Port B
  2004 00:FEF0: 02                           .DB     $02             ;Command Register Port A
  2005 00:FEF1: 02                           .DB     $02             ;Command Register Port A
  2006 00:FEF2: 05                           .DB     $05             ;Interrupt Mask Register
  2007 00:FEF3: 02                           .DB     $02             ;Command Register Port A
  2008                        INIT_OFFSETE    ;End of DUART Initialization Register Offsets
  2009                        ;
  2010                        ; BIOS 4.0x Data space for software RTC.
  2011                        ;
  2012                        MAX_DATE                                ;Maximum days per Month+1
  2013 00:FEF4: 20 1D 20 1F                  .DB     32,29,32,31,32,31,32,32,31,32,31,32
       00:FEF8: 20 1F 20 20 
       00:FEFC: 1F 20 1F 20 
  2014                        ;
  2015                        ;END OF BIOS VECTOR DATA AND HARDWARE DEFAULT CONFIGURATION DATA
  2016                        ;**************************************************************************************************
  2017                        ;START OF TOP PAGE - DO NOT MOVE FROM THIS ADDRESS!! JUMP Table starts here.
  2018                        ; - BIOS calls are listed below - total of 32, Reserved calls are for future hardware support
  2019                        ; - "B_" JUMP Tables entries are for BIOS routines, provides isolation between Monitor and BIOS
  2020                        ; - Two new calls used for Benchmark Timer, calls 16/17 starting with CO2BIOS 2.02
  2021                        ; - One additional Benchmark Timer call to allow start/stop of timer without resetting it
  2022                        ; - New calls added for IDE Controller and RTC starting with C02BIOS 3.04
  2023                        ; - New calls added for second serial port starting with C02BIOS 4.00
  2024                        ; - New calls added to Enable/Disable IDE Write Cache (Hitachi 3K8 Microdrive) C02BIOS 4.00
  2025                        ; - EXE_XLDLY has been removed, not really used, frees a Page Zero location used for IDE now
  Thu Jan 27 2022  6:08                                                                                                    Page 39


  2026                        ;
  2027                        ; NOTE: All Jump table calls add 3 clock cycles to execution time for each BIOS function.
  2028                        ;
  2029                                .ORG    $FF00   ;BIOS JMP Table, Cold Init and Vector handlers
  2030                        ;
  2031 00:FF00: 4C 28 FB     B_IDE_RESET     JMP     IDE_RESET       ;Call 00 $FF00
  2032 00:FF03: 4C 34 FB     B_IDE_GET_STAT  JMP     IDE_GET_STATUS  ;Call 01 $FF03
  2033 00:FF06: 4C EA FA     B_IDE_IDENTIFY  JMP     IDE_IDENTIFY    ;Call 02 $FF06
  2034 00:FF09: 4C 8F F8     B_IDE_READ_LBA  JMP     IDE_READ_LBA    ;Call 03 $FF09
  2035 00:FF0C: 4C B4 F8     B_IDE_WRITE_LBA JMP     IDE_WRITE_LBA   ;Call 04 $FF0C
  2036 00:FF0F: 4C FA F8     B_IDE_VERFY_LBA JMP     IDE_VERIFY_LBA  ;Call 05 $FF0F
  2037 00:FF12: 4C 1E F9     B_IDE_SET_LBA   JMP     IDE_SET_LBA     ;Call 06 $FF12
  2038 00:FF15: 4C 17 F9     B_IDE_SET_ADDR  JMP     IDE_SET_ADDRESS ;Call 07 $FF15
  2039 00:FF18: 4C 0B FB     B_IDE_EN_CACHE  JMP     IDE_EN_CACHE    ;Call 08 $FF18
  2040 00:FF1B: 4C 24 FB     B_IDE_DIS_CACHE JMP     IDE_DIS_CACHE   ;Call 09 $FF1B
  2041                        ;
  2042 00:FF1E: 4C 67 F9     B_RTC_NVRD      JMP     RTC_NVRD        ;Call 10 $FF1E
  2043 00:FF21: 4C 74 F9     B_RTC_NVWR      JMP     RTC_NVWR        ;Call 11 $FF21
  2044 00:FF24: 4C 35 FA     B_RTC_INIT      JMP     INIT_RTC        ;Call 12 $FF24
  2045                        ;
  2046 00:FF27: 4C 30 F8     B_CHRIN2        JMP     CHRIN2          ;Call 13 $FF27
  2047 00:FF2A: 4C 42 F8     B_CHROUT2       JMP     CHROUT2         ;Call 14 $FF2A
  2048                        ;
  2049 00:FF2D: 4C 81 F8     B_CNT_INIT      JMP     CNT_INIT        ;Call 15 $FF2D
  2050 00:FF30: 4C 89 F8     B_CNT_STRT      JMP     CNT_STRT        ;Call 16 $FF30
  2051 00:FF33: 4C 8C F8     B_CNT_STOP      JMP     CNT_STOP        ;Call 17 $FF33
  2052                        ;
  2053 00:FF36: 4C 00 F8     B_CHRIN_NW      JMP     CHRIN_NW        ;Call 18 $FF36
  2054 00:FF39: 4C 06 F8     B_CHRIN         JMP     CHRIN           ;Call 19 $FF39
  2055 00:FF3C: 4C 19 F8     B_CHROUT        JMP     CHROUT          ;Call 20 $FF3C
  2056                        ;
  2057 00:FF3F: 4C 59 F8     B_SET_DLY       JMP     SET_DLY         ;Call 21 $FF3F
  2058 00:FF42: 4C 60 F8     B_EXE_MSDLY     JMP     EXE_MSDLY       ;Call 22 $FF42
  2059 00:FF45: 4C 6C F8     B_EXE_LGDLY     JMP     EXE_LGDLY       ;Call 23 $FF45
  2060                        ;
  2061 00:FF48: 4C B3 FF     B_RESERVE       JMP     RESERVE         ;Call 24 $FF48
  2062                        ;
  2063 00:FF4B: 4C A3 FF     B_INIT_VEC      JMP     INIT_VEC        ;Call 25 $FF4B
  2064 00:FF4E: 4C 9F FF     B_INIT_CFG      JMP     INIT_CFG        ;Call 26 $FF4E
  2065 00:FF51: 4C CB F9     B_INIT_28L92    JMP     INIT_28L92      ;Call 27 $FF51
  2066 00:FF54: 4C F8 F9     B_RESET_28L92   JMP     RESET_28L92     ;Call 28 $FF54
  2067                        ;
  2068 00:FF57: 6C 0E 03     B_WRMMNVEC0     JMP     (WRMMNVEC0)     ;Call 29 $FF57
  2069 00:FF5A: 6C 0C 03     B_CLDMNVEC0     JMP     (CLDMNVEC0)     ;Call 30 $FF5A
  2070                        ;
  2071                        B_COLDSTRT                              ;Call 31 $FF5D
  2072 00:FF5D: 78                           SEI                     ;Disable Interrupts (safety)
  2073 00:FF5E: D8                           CLD                     ;Clear decimal mode (safety)
  2074 00:FF5F: A2 00                        LDX     #$00            ;Index for length of page (256 bytes)
  2075 00:FF61: 74 00        PAGE0_LP        STZ     $00,X           ;Clear Page Zero
  2076 00:FF63: CA                           DEX                     ;Decrement index
  2077 00:FF64: D0 FB                        BNE     PAGE0_LP        ;Loop back till done
  2078 00:FF66: CA                           DEX                     ;LDX #$FF ;-)
  2079 00:FF67: 9A                           TXS                     ;Set Stack Pointer
  2080                        ;
  2081 00:FF68: 20 9C FF                     JSR     INIT_PG03       ;Xfer default Vectors/HW Config to Page $03
  2082 00:FF6B: 20 C4 F9                     JSR     INIT_IO         ;Init I/O - DUART (Console/Timer)
  2083                        ;
  2084                        ; Send BIOS init msg to console - note: X Reg is zero on return from INIT_IO
  2085                        ;
  2086 00:FF6E: BD D0 FF     BMSG_LP         LDA     BIOS_MSG,X      ;Get BIOS init msg
  2087 00:FF71: F0 06                        BEQ     CHECK_IO        ;If zero, msg done, Test for extra I/O
  2088 00:FF73: 20 19 F8                     JSR     CHROUT          ;Send to console
  Thu Jan 27 2022  6:08                                                                                                    Page 40


  2089 00:FF76: E8                           INX                     ;Increment Index
  2090 00:FF77: 80 F5                        BRA     BMSG_LP         ;Loop back until done
  2091                        CHECK_IO
  2092 00:FF79: 20 07 FA                     JSR     DETECT_RTC      ;Detect and Init RTC
  2093 00:FF7C: 20 AD FA                     JSR     DETECT_IDE      ;Detect and Init IDE
  2094 00:FF7F: 20 B3 FF                     JSR     RESERVE         ;Reserve one more Init routine for future use
  2095 00:FF82: 80 D6                        BRA     B_CLDMNVEC0     ;Branch to Coldstart Monitor
  2096                        ;
  2097                        IRQ_VECTOR                              ;This is the ROM start for the BRK/IRQ handler
  2098 00:FF84: 48                           PHA                     ;Save A Reg (3)
  2099 00:FF85: DA                           PHX                     ;Save X Reg (3)
  2100 00:FF86: 5A                           PHY                     ;Save Y Reg (3)
  2101 00:FF87: BA                           TSX                     ;Get Stack pointer (2)
  2102 00:FF88: BD 04 01                     LDA     $0100+4,X       ;Get Status Register (4)
  2103 00:FF8B: 29 10                        AND     #$10            ;Mask for BRK bit set (2)
  2104 00:FF8D: D0 03                        BNE     DO_BRK          ;If set, handle BRK (2/3)
  2105 00:FF8F: 6C 04 03                     JMP     (IRQVEC0)       ;Jump to Soft vectored IRQ Handler (6)
  2106 00:FF92: 6C 02 03     DO_BRK          JMP     (BRKVEC0)       ;Jump to Soft vectored BRK Handler (6)
  2107 00:FF95: 6C 00 03     NMI_ROM         JMP     (NMIVEC0)       ;Jump to Soft vectored NMI handler (6)
  2108                        ;
  2109                        ;This is the standard return for the IRQ/BRK handler routines
  2110                        ;
  2111 00:FF98: 7A           IRQ_EXIT0       PLY                     ;Restore Y Reg (4)
  2112 00:FF99: FA                           PLX                     ;Restore X Reg (4)
  2113 00:FF9A: 68                           PLA                     ;Restore A Reg (4)
  2114 00:FF9B: 40                           RTI                     ;Return from IRQ/BRK routine (6)
  2115                        ;
  2116 00:FF9C: 20 A3 FF     INIT_PG03       JSR     INIT_VEC        ;Init the Soft Vectors first
  2117 00:FF9F: A0 40        INIT_CFG        LDY     #$40            ;Get offset to Config data
  2118 00:FFA1: 80 02                        BRA     DATA_XFER       ;Go move the Config data to page $03
  2119 00:FFA3: A0 20        INIT_VEC        LDY     #$20            ;Get offset to Vector data
  2120                        ;
  2121 00:FFA5: 78           DATA_XFER       SEI                     ;Disable Interrupts, can be called via JMP table
  2122 00:FFA6: A2 20                        LDX     #$20            ;Set count for 32 bytes
  2123 00:FFA8: B9 9F FE     DATA_XFLP       LDA     VEC_TABLE-1,Y   ;Get ROM table data
  2124 00:FFAB: 99 FF 02                     STA     SOFTVEC-1,Y     ;Store in Soft table location
  2125 00:FFAE: 88                           DEY                     ;Decrement index
  2126 00:FFAF: CA                           DEX                     ;Decrement count
  2127 00:FFB0: D0 F6                        BNE     DATA_XFLP       ;Loop back till done
  2128 00:FFB2: 58                           CLI                     ;Re-enable interrupts
  2129 00:FFB3: 60           RESERVE         RTS                     ;Return to caller
  2130                        ;
  2131                        RTC_MSG
  2132                        ;
  2133                        ;This is a short BIOS message that is displayed when the DS15x1 RTC is found
  2134 00:FFB4: 52 54 43 20                  .DB     "RTC found"
       00:FFB8: 66 6F 75 6E 
       00:FFBC: 64 
  2135 00:FFBD: 0D 0A 00                     .DB     $0D,$0A,$00
  2136                        ;
  2137                        IDE_MSG
  2138                        ;
  2139                        ;This is a short BIOS message that is displayed when the IDE controller is found
  2140 00:FFC0: 49 44 45 20                  .DB     "IDE found"
       00:FFC4: 66 6F 75 6E 
       00:FFC8: 64 
  2141 00:FFC9: 0D 0A 00                     .DB     $0D,$0A,$00
  2142                        ;
  2143                        ;The offset data here is used as an index to the Identity Block of Data from the IDE controller
  2144 00:FFCC: 78 79 7A 7B  LBA_OFFSET      .DB     120,121,122,123 ;Offset Data for LBA Size
  2145                        ;
  2146                        ;This BIOS version does not rely on CPU clock frequency for RTC timing. Timing is based on the
  2147                        ; SC28L92 DUART Timer/Counter which has a fixed frequency of 3.6864MHz. Jiffy clock set at 10ms.
  Thu Jan 27 2022  6:08                                                                                                    Page 41


  2148                        ; Edit Displayed clock rate at CPU_CLK below as needed if running "other" than 8MHz.
  2149                        ;
  2150                                .ORG    $FFD0   ;Hard coded BIOS message to the top of memory (Monitor uses this)
  2151                        ;
  2152                        ;BIOS init message - sent before jumping to the monitor coldstart vector.
  2153                        ; CO2BIOS 2.01 and later, provides a BIOS message with more detail, fixed length/location!
  2154                        ;
  2155 00:FFD0: 0D 0A        BIOS_MSG        .DB     $0D,$0A         ;CR/LF
  2156 00:FFD2: 43 30 32 42                  .DB     "C02BIOS 4.01"  ;Updated Release Version
       00:FFD6: 49 4F 53 20 
       00:FFDA: 34 2E 30 31 
  2157 00:FFDE: 0D 0A                        .DB     $0D,$0A         ;CR/LF
  2158 00:FFE0: 57 36 35 43                  .DB     "W65C02@"       ;Display CPU type
       00:FFE4: 30 32 40 
  2159 00:FFE7: 38 4D 48 7A  CPU_CLK         .DB     "8MHz"          ;Displayed CPU Clock frequency
  2160 00:FFEB: 0D 0A                        .DB     $0D,$0A         ;CR/LF
  2161 00:FFED: 32 37 2F 30                  .DB     "27/01/2022"    ;DD/MM/YYYY
       00:FFF1: 31 2F 32 30 
       00:FFF5: 32 32 
  2162 00:FFF7: 0D 0A 00                     .DB     $0D,$0A,$00     ;CR/LF and terminate string
  2163                        ;
  2164                                .ORG    $FFFA   ;65C02 Vectors:
  2165 00:FFFA: 95 FF                        .DW     NMI_ROM         ;NMI
  2166 00:FFFC: 5D FF                        .DW     B_COLDSTRT      ;RESET
  2167 00:FFFE: 84 FF                        .DW     IRQ_VECTOR      ;IRQ/BRK
  2168                                .END


      Lines assembled: 2527
      Errors: 0
